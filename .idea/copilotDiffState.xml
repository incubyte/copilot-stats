<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/apps/backend/test/github/github.controller.integration.spec.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/apps/backend/test/github/github.controller.integration.spec.ts" />
              <option name="originalContent" value="import { Test, TestingModule } from '@nestjs/testing';&#10;import { INestApplication } from '@nestjs/common';&#10;import { ConfigModule, ConfigService } from '@nestjs/config';&#10;import { afterEach, beforeEach, describe, expect, it, vi } from 'vitest';&#10;import request from 'supertest';&#10;import { GitHubController } from '../../src/github/github.controller';&#10;import { GitHubService } from '../../src/github/github.service';&#10;import {&#10;  mockCopilotSeats,&#10;  mockCopilotUsageMetrics,&#10;  mockCurrentUser,&#10;  mockPullRequestReviews,&#10;  mockPullRequests,&#10;} from '../setup';&#10;&#10;describe('GitHubController (Integration)', () =&gt; {&#10;  let app: INestApplication;&#10;  let githubController: GitHubController;&#10;&#10;  beforeEach(async () =&gt; {&#10;    const moduleFixture: TestingModule = await Test.createTestingModule({&#10;      imports: [&#10;        ConfigModule.forRoot({&#10;          isGlobal: true,&#10;          envFilePath: '.env.test',&#10;        }),&#10;      ],&#10;      controllers: [GitHubController],&#10;      providers: [&#10;        GitHubService,&#10;        {&#10;          provide: ConfigService,&#10;          useValue: {&#10;            get: vi.fn((key: string) =&gt; {&#10;              const config = {&#10;                GITHUB_TOKEN: 'test-token',&#10;                GITHUB_ORG: 'test-org',&#10;              };&#10;              return config[key];&#10;            }),&#10;          },&#10;        },&#10;      ],&#10;    }).compile();&#10;&#10;    app = moduleFixture.createNestApplication();&#10;    githubController = moduleFixture.get&lt;GitHubController&gt;(GitHubController);&#10;    await app.init();&#10;  });&#10;&#10;  afterEach(async () =&gt; {&#10;    await app.close();&#10;  });&#10;&#10;  describe('GET /github/user', () =&gt; {&#10;    it('should return current authenticated user information', async () =&gt; {&#10;      const response = await request(app.getHttpServer())&#10;        .get('/github/user')&#10;        .expect(200);&#10;&#10;      expect(response.body).toEqual(mockCurrentUser);&#10;      expect(response.body.login).toBe('advait-incubyte');&#10;      expect(response.body.company).toBe('@incubyte');&#10;    });&#10;&#10;    it('should handle authentication errors gracefully', async () =&gt; {&#10;      // This test would require modifying the MSW handler to return 401&#10;      // We'll implement this in the service unit tests&#10;    });&#10;  });&#10;&#10;  describe('GET /github/copilot/usage', () =&gt; {&#10;    it('should return Copilot usage metrics for the organization', async () =&gt; {&#10;      const response = await request(app.getHttpServer())&#10;        .get('/github/copilot/usage')&#10;        .expect(200);&#10;&#10;      expect(response.body).toEqual(mockCopilotUsageMetrics);&#10;      expect(Array.isArray(response.body)).toBe(true);&#10;      expect(response.body[0]).toHaveProperty('day');&#10;      expect(response.body[0]).toHaveProperty('total_suggestions_count');&#10;      expect(response.body[0]).toHaveProperty('total_acceptances_count');&#10;      expect(response.body[0]).toHaveProperty('breakdown');&#10;    });&#10;&#10;    it('should accept since and until query parameters', async () =&gt; {&#10;      const since = '2025-01-01';&#10;      const until = '2025-01-31';&#10;&#10;      const response = await request(app.getHttpServer())&#10;        .get(`/github/copilot/usage?since=${since}&amp;until=${until}`)&#10;        .expect(200);&#10;&#10;      expect(response.body).toEqual(mockCopilotUsageMetrics);&#10;      // In a real implementation, we'd verify the query params were passed to the API&#10;    });&#10;&#10;    it('should return meaningful data structure for frontend consumption', async () =&gt; {&#10;      const response = await request(app.getHttpServer())&#10;        .get('/github/copilot/usage')&#10;        .expect(200);&#10;&#10;      const usageData = response.body[0];&#10;&#10;      // Verify the data contains everything the frontend needs&#10;      expect(usageData.total_active_users).toBe(3); // Your 3 teammates&#10;      expect(usageData.breakdown).toHaveLength(2); // TypeScript and JavaScript&#10;      expect(usageData.breakdown[0]).toHaveProperty('language');&#10;      expect(usageData.breakdown[0]).toHaveProperty('editor');&#10;      expect(usageData.breakdown[0]).toHaveProperty('acceptances_count');&#10;    });&#10;  });&#10;&#10;  describe('GET /github/copilot/seats', () =&gt; {&#10;    it('should return Copilot seat information for team members', async () =&gt; {&#10;      const response = await request(app.getHttpServer())&#10;        .get('/github/copilot/seats')&#10;        .expect(200);&#10;&#10;      expect(response.body).toEqual(mockCopilotSeats);&#10;      expect(response.body.total_seats).toBe(5);&#10;      expect(response.body.seats).toHaveLength(3); // Your 3 teammates&#10;      expect(response.body.seats[0].assignee.login).toBe('teammate1');&#10;    });&#10;&#10;    it('should provide seat data needed for filtering usage metrics', async () =&gt; {&#10;      const response = await request(app.getHttpServer())&#10;        .get('/github/copilot/seats')&#10;        .expect(200);&#10;&#10;      const seats = response.body.seats;&#10;&#10;      // Verify we can identify your specific teammates&#10;      const teammateLogins = seats.map((seat) =&gt; seat.assignee.login);&#10;      expect(teammateLogins).toContain('teammate1');&#10;      expect(teammateLogins).toContain('teammate2');&#10;      expect(teammateLogins).toContain('teammate3');&#10;&#10;      // Verify we have activity information&#10;      seats.forEach((seat) =&gt; {&#10;        expect(seat).toHaveProperty('last_activity_at');&#10;        expect(seat).toHaveProperty('last_activity_editor');&#10;      });&#10;    });&#10;  });&#10;&#10;  describe('GET /github/repos/:repo/pulls', () =&gt; {&#10;    it('should return pull requests for a specific repository', async () =&gt; {&#10;      const repo = 'test-repo';&#10;&#10;      const response = await request(app.getHttpServer())&#10;        .get(`/github/repos/${repo}/pulls`)&#10;        .expect(200);&#10;&#10;      expect(response.body).toEqual(mockPullRequests);&#10;      expect(Array.isArray(response.body)).toBe(true);&#10;      expect(response.body[0]).toHaveProperty('number');&#10;      expect(response.body[0]).toHaveProperty('title');&#10;      expect(response.body[0]).toHaveProperty('user');&#10;    });&#10;&#10;    it('should accept since query parameter for date filtering', async () =&gt; {&#10;      const repo = 'test-repo';&#10;      const since = '2025-01-01';&#10;&#10;      const response = await request(app.getHttpServer())&#10;        .get(`/github/repos/${repo}/pulls?since=${since}`)&#10;        .expect(200);&#10;&#10;      expect(response.body).toEqual(mockPullRequests);&#10;    });&#10;  });&#10;&#10;  describe('GET /github/repos/:repo/pulls/:pullNumber/reviews', () =&gt; {&#10;    it('should return reviews for a specific pull request', async () =&gt; {&#10;      const repo = 'test-repo';&#10;      const pullNumber = 123;&#10;&#10;      const response = await request(app.getHttpServer())&#10;        .get(`/github/repos/${repo}/pulls/${pullNumber}/reviews`)&#10;        .expect(200);&#10;&#10;      expect(response.body).toEqual(mockPullRequestReviews);&#10;      expect(Array.isArray(response.body)).toBe(true);&#10;    });&#10;&#10;    it('should include both human and bot reviews for Copilot detection', async () =&gt; {&#10;      const repo = 'test-repo';&#10;      const pullNumber = 123;&#10;&#10;      const response = await request(app.getHttpServer())&#10;        .get(`/github/repos/${repo}/pulls/${pullNumber}/reviews`)&#10;        .expect(200);&#10;&#10;      const reviews = response.body;&#10;&#10;      // Should have both bot and human reviews&#10;      const botReview = reviews.find((review) =&gt; review.user.type === 'Bot');&#10;      const humanReview = reviews.find((review) =&gt; review.user.type === 'User');&#10;&#10;      expect(botReview).toBeDefined();&#10;      expect(humanReview).toBeDefined();&#10;      expect(botReview.user.login).toBe('github-actions[bot]');&#10;    });&#10;  });&#10;&#10;  describe('GET /github/copilot/summary', () =&gt; {&#10;    it('should return a combined summary of Copilot metrics for last 28 days', async () =&gt; {&#10;      const response = await request(app.getHttpServer())&#10;        .get('/github/copilot/summary')&#10;        .expect(200);&#10;&#10;      expect(response.body).toHaveProperty('period');&#10;      expect(response.body).toHaveProperty('usage_metrics');&#10;      expect(response.body).toHaveProperty('seat_info');&#10;      expect(response.body).toHaveProperty('summary');&#10;&#10;      // Verify period calculation&#10;      expect(response.body.period.days).toBe(28);&#10;      expect(response.body.period.since).toBeDefined();&#10;      expect(response.body.period.until).toBeDefined();&#10;&#10;      // Verify summary statistics&#10;      expect(response.body.summary.total_seats).toBe(5);&#10;      expect(response.body.summary.total_active_users).toBe(1); // Length of mock usage metrics array&#10;    });&#10;&#10;    it('should provide data structure suitable for dashboard display', async () =&gt; {&#10;      const response = await request(app.getHttpServer())&#10;        .get('/github/copilot/summary')&#10;        .expect(200);&#10;&#10;      const summary = response.body;&#10;&#10;      // Frontend should be able to easily extract key metrics&#10;      expect(typeof summary.summary.total_seats).toBe('number');&#10;      expect(typeof summary.summary.total_active_users).toBe('number');&#10;      expect(Array.isArray(summary.usage_metrics)).toBe(true);&#10;      expect(Array.isArray(summary.seat_info.seats)).toBe(true);&#10;    });&#10;  });&#10;});&#10;" />
              <option name="updatedContent" value="import { Test, TestingModule } from '@nestjs/testing';&#10;import { INestApplication } from '@nestjs/common';&#10;import { ConfigModule, ConfigService } from '@nestjs/config';&#10;import { afterEach, beforeEach, describe, expect, it, vi } from 'vitest';&#10;import request from 'supertest';&#10;import { GitHubController } from '../../src/github/github.controller';&#10;import { GitHubService } from '../../src/github/github.service';&#10;import {&#10;  mockCopilotSeats,&#10;  mockCopilotUsageMetrics,&#10;  mockCurrentUser,&#10;  mockPullRequestReviews,&#10;  mockPullRequests,&#10;  type GitHubUser,&#10;  type CopilotUsageMetrics,&#10;  type CopilotSeats,&#10;  type PullRequest,&#10;  type PullRequestReview,&#10;  type CopilotSummary,&#10;} from '../setup';&#10;&#10;describe('GitHubController (Integration)', () =&gt; {&#10;  let app: INestApplication;&#10;&#10;  beforeEach(async () =&gt; {&#10;    const moduleFixture: TestingModule = await Test.createTestingModule({&#10;      imports: [&#10;        ConfigModule.forRoot({&#10;          isGlobal: true,&#10;          envFilePath: '.env.test',&#10;        }),&#10;      ],&#10;      controllers: [GitHubController],&#10;      providers: [&#10;        GitHubService,&#10;        {&#10;          provide: ConfigService,&#10;          useValue: {&#10;            get: vi.fn((key: string): string =&gt; {&#10;              const config: Record&lt;string, string&gt; = {&#10;                GITHUB_TOKEN: 'test-token',&#10;                GITHUB_ORG: 'test-org',&#10;              };&#10;              return config[key] ?? '';&#10;            }),&#10;          },&#10;        },&#10;      ],&#10;    }).compile();&#10;&#10;    app = moduleFixture.createNestApplication();&#10;    await app.init();&#10;  });&#10;&#10;  afterEach(async () =&gt; {&#10;    await app.close();&#10;  });&#10;&#10;  describe('GET /github/user', () =&gt; {&#10;    it('should return current authenticated user information', async () =&gt; {&#10;      const response = await request(app.getHttpServer())&#10;        .get('/github/user')&#10;        .expect(200);&#10;&#10;      const user = response.body as GitHubUser;&#10;      expect(user).toEqual(mockCurrentUser);&#10;      expect(user.login).toBe('advait-incubyte');&#10;      expect(user.company).toBe('@incubyte');&#10;    });&#10;&#10;    it('should handle authentication errors gracefully', async () =&gt; {&#10;      // This test would require modifying the MSW handler to return 401&#10;      // We'll implement this in the service unit tests&#10;    });&#10;  });&#10;&#10;  describe('GET /github/copilot/usage', () =&gt; {&#10;    it('should return Copilot usage metrics for the organization', async () =&gt; {&#10;      const response = await request(app.getHttpServer())&#10;        .get('/github/copilot/usage')&#10;        .expect(200);&#10;&#10;      const usageMetrics = response.body as CopilotUsageMetrics[];&#10;      expect(usageMetrics).toEqual(mockCopilotUsageMetrics);&#10;      expect(Array.isArray(usageMetrics)).toBe(true);&#10;      expect(usageMetrics[0]).toHaveProperty('day');&#10;      expect(usageMetrics[0]).toHaveProperty('total_suggestions_count');&#10;      expect(usageMetrics[0]).toHaveProperty('total_acceptances_count');&#10;      expect(usageMetrics[0]).toHaveProperty('breakdown');&#10;    });&#10;&#10;    it('should accept since and until query parameters', async () =&gt; {&#10;      const since = '2025-01-01';&#10;      const until = '2025-01-31';&#10;&#10;      const response = await request(app.getHttpServer())&#10;        .get(`/github/copilot/usage?since=${since}&amp;until=${until}`)&#10;        .expect(200);&#10;&#10;      const usageMetrics = response.body as CopilotUsageMetrics[];&#10;      expect(usageMetrics).toEqual(mockCopilotUsageMetrics);&#10;      // In a real implementation, we'd verify the query params were passed to the API&#10;    });&#10;&#10;    it('should return meaningful data structure for frontend consumption', async () =&gt; {&#10;      const response = await request(app.getHttpServer())&#10;        .get('/github/copilot/usage')&#10;        .expect(200);&#10;&#10;      const usageMetrics = response.body as CopilotUsageMetrics[];&#10;      const usageData = usageMetrics[0];&#10;&#10;      // Verify the data contains everything the frontend needs&#10;      expect(usageData.total_active_users).toBe(3); // Your 3 teammates&#10;      expect(usageData.breakdown).toHaveLength(2); // TypeScript and JavaScript&#10;      expect(usageData.breakdown[0]).toHaveProperty('language');&#10;      expect(usageData.breakdown[0]).toHaveProperty('editor');&#10;      expect(usageData.breakdown[0]).toHaveProperty('acceptances_count');&#10;    });&#10;  });&#10;&#10;  describe('GET /github/copilot/seats', () =&gt; {&#10;    it('should return Copilot seat information for team members', async () =&gt; {&#10;      const response = await request(app.getHttpServer())&#10;        .get('/github/copilot/seats')&#10;        .expect(200);&#10;&#10;      const seats = response.body as CopilotSeats;&#10;      expect(seats).toEqual(mockCopilotSeats);&#10;      expect(seats.total_seats).toBe(5);&#10;      expect(seats.seats).toHaveLength(3); // Your 3 teammates&#10;      expect(seats.seats[0].assignee.login).toBe('teammate1');&#10;    });&#10;&#10;    it('should provide seat data needed for filtering usage metrics', async () =&gt; {&#10;      const response = await request(app.getHttpServer())&#10;        .get('/github/copilot/seats')&#10;        .expect(200);&#10;&#10;      const seatsData = response.body as CopilotSeats;&#10;      const { seats } = seatsData;&#10;&#10;      // Verify we can identify your specific teammates&#10;      const teammateLogins = seats.map((seat) =&gt; seat.assignee.login);&#10;      expect(teammateLogins).toContain('teammate1');&#10;      expect(teammateLogins).toContain('teammate2');&#10;      expect(teammateLogins).toContain('teammate3');&#10;&#10;      // Verify we have activity information&#10;      seats.forEach((seat) =&gt; {&#10;        expect(seat).toHaveProperty('last_activity_at');&#10;        expect(seat).toHaveProperty('last_activity_editor');&#10;      });&#10;    });&#10;  });&#10;&#10;  describe('GET /github/repos/:repo/pulls', () =&gt; {&#10;    it('should return pull requests for a specific repository', async () =&gt; {&#10;      const repo = 'test-repo';&#10;&#10;      const response = await request(app.getHttpServer())&#10;        .get(`/github/repos/${repo}/pulls`)&#10;        .expect(200);&#10;&#10;      const pullRequests = response.body as PullRequest[];&#10;      expect(pullRequests).toEqual(mockPullRequests);&#10;      expect(Array.isArray(pullRequests)).toBe(true);&#10;      expect(pullRequests[0]).toHaveProperty('number');&#10;      expect(pullRequests[0]).toHaveProperty('title');&#10;      expect(pullRequests[0]).toHaveProperty('user');&#10;    });&#10;&#10;    it('should accept since query parameter for date filtering', async () =&gt; {&#10;      const repo = 'test-repo';&#10;      const since = '2025-01-01';&#10;&#10;      const response = await request(app.getHttpServer())&#10;        .get(`/github/repos/${repo}/pulls?since=${since}`)&#10;        .expect(200);&#10;&#10;      const pullRequests = response.body as PullRequest[];&#10;      expect(pullRequests).toEqual(mockPullRequests);&#10;    });&#10;  });&#10;&#10;  describe('GET /github/repos/:repo/pulls/:pullNumber/reviews', () =&gt; {&#10;    it('should return reviews for a specific pull request', async () =&gt; {&#10;      const repo = 'test-repo';&#10;      const pullNumber = 123;&#10;&#10;      const response = await request(app.getHttpServer())&#10;        .get(`/github/repos/${repo}/pulls/${pullNumber}/reviews`)&#10;        .expect(200);&#10;&#10;      const reviews = response.body as PullRequestReview[];&#10;      expect(reviews).toEqual(mockPullRequestReviews);&#10;      expect(Array.isArray(reviews)).toBe(true);&#10;    });&#10;&#10;    it('should include both human and bot reviews for Copilot detection', async () =&gt; {&#10;      const repo = 'test-repo';&#10;      const pullNumber = 123;&#10;&#10;      const response = await request(app.getHttpServer())&#10;        .get(`/github/repos/${repo}/pulls/${pullNumber}/reviews`)&#10;        .expect(200);&#10;&#10;      const reviews = response.body as PullRequestReview[];&#10;&#10;      // Should have both bot and human reviews&#10;      const botReview = reviews.find((review) =&gt; review.user.type === 'Bot');&#10;      const humanReview = reviews.find((review) =&gt; review.user.type === 'User');&#10;&#10;      expect(botReview).toBeDefined();&#10;      expect(humanReview).toBeDefined();&#10;      expect(botReview?.user.login).toBe('github-actions[bot]');&#10;    });&#10;  });&#10;&#10;  describe('GET /github/copilot/summary', () =&gt; {&#10;    it('should return a combined summary of Copilot metrics for last 28 days', async () =&gt; {&#10;      const response = await request(app.getHttpServer())&#10;        .get('/github/copilot/summary')&#10;        .expect(200);&#10;&#10;      const summary = response.body as CopilotSummary;&#10;      expect(summary).toHaveProperty('period');&#10;      expect(summary).toHaveProperty('usage_metrics');&#10;      expect(summary).toHaveProperty('seat_info');&#10;      expect(summary).toHaveProperty('summary');&#10;&#10;      // Verify period calculation&#10;      expect(summary.period.days).toBe(28);&#10;      expect(summary.period.since).toBeDefined();&#10;      expect(summary.period.until).toBeDefined();&#10;&#10;      // Verify summary statistics&#10;      expect(summary.summary.total_seats).toBe(5);&#10;      expect(summary.summary.total_active_users).toBe(1); // Length of mock usage metrics array&#10;    });&#10;&#10;    it('should provide data structure suitable for dashboard display', async () =&gt; {&#10;      const response = await request(app.getHttpServer())&#10;        .get('/github/copilot/summary')&#10;        .expect(200);&#10;&#10;      const summary = response.body as CopilotSummary;&#10;&#10;      // Frontend should be able to easily extract key metrics&#10;      expect(typeof summary.summary.total_seats).toBe('number');&#10;      expect(typeof summary.summary.total_active_users).toBe('number');&#10;      expect(Array.isArray(summary.usage_metrics)).toBe(true);&#10;      expect(Array.isArray(summary.seat_info.seats)).toBe(true);&#10;    });&#10;  });&#10;});&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/apps/backend/test/setup.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/apps/backend/test/setup.ts" />
              <option name="originalContent" value="import { afterAll, afterEach, beforeAll } from 'vitest';&#10;import { setupServer } from 'msw/node';&#10;import { http, HttpResponse } from 'msw';&#10;&#10;// Mock GitHub API responses - based on actual GitHub Copilot Metrics API structure&#10;export const mockCopilotUsageMetrics = [&#10;  {&#10;    day: '2025-01-01',&#10;    total_suggestions_count: 1500,&#10;    total_acceptances_count: 750,&#10;    total_lines_suggested: 12000,&#10;    total_lines_accepted: 6000,&#10;    total_active_users: 3,&#10;    total_chat_acceptances: 25,&#10;    total_chat_turns: 100,&#10;    total_active_chat_users: 2,&#10;    breakdown: [&#10;      {&#10;        language: 'typescript',&#10;        editor: 'vscode',&#10;        suggestions_count: 800,&#10;        acceptances_count: 400,&#10;        lines_suggested: 6400,&#10;        lines_accepted: 3200,&#10;        active_users: 2,&#10;      },&#10;      {&#10;        language: 'javascript',&#10;        editor: 'vscode',&#10;        suggestions_count: 700,&#10;        acceptances_count: 350,&#10;        lines_suggested: 5600,&#10;        lines_accepted: 2800,&#10;        active_users: 1,&#10;      },&#10;    ],&#10;  },&#10;];&#10;&#10;export const mockCopilotSeats = {&#10;  total_seats: 5,&#10;  seats: [&#10;    {&#10;      created_at: '2024-12-01T00:00:00Z',&#10;      updated_at: '2025-01-01T00:00:00Z',&#10;      pending_cancellation_date: null,&#10;      last_activity_at: '2025-01-15T10:30:00Z',&#10;      last_activity_editor: 'vscode',&#10;      assignee: {&#10;        login: 'teammate1',&#10;        id: 12345,&#10;        type: 'User',&#10;      },&#10;    },&#10;    {&#10;      created_at: '2024-12-01T00:00:00Z',&#10;      updated_at: '2025-01-01T00:00:00Z',&#10;      pending_cancellation_date: null,&#10;      last_activity_at: '2025-01-15T11:00:00Z',&#10;      last_activity_editor: 'vscode',&#10;      assignee: {&#10;        login: 'teammate2',&#10;        id: 12346,&#10;        type: 'User',&#10;      },&#10;    },&#10;    {&#10;      created_at: '2024-12-01T00:00:00Z',&#10;      updated_at: '2025-01-01T00:00:00Z',&#10;      pending_cancellation_date: null,&#10;      last_activity_at: '2025-01-15T09:45:00Z',&#10;      last_activity_editor: 'vscode',&#10;      assignee: {&#10;        login: 'teammate3',&#10;        id: 12347,&#10;        type: 'User',&#10;      },&#10;    },&#10;  ],&#10;};&#10;&#10;export const mockCurrentUser = {&#10;  login: 'advait-incubyte',&#10;  id: 215627961,&#10;  type: 'User',&#10;  name: 'Advait Maindalkar',&#10;  company: '@incubyte',&#10;};&#10;&#10;export const mockPullRequests = [&#10;  {&#10;    id: 1,&#10;    number: 123,&#10;    title: 'Add Copilot metrics collection',&#10;    user: { login: 'teammate1' },&#10;    created_at: '2025-01-10T10:00:00Z',&#10;    updated_at: '2025-01-10T12:00:00Z',&#10;    state: 'closed',&#10;    merged_at: '2025-01-10T12:00:00Z',&#10;  },&#10;  {&#10;    id: 2,&#10;    number: 124,&#10;    title: 'Fix authentication bug',&#10;    user: { login: 'teammate2' },&#10;    created_at: '2025-01-11T14:00:00Z',&#10;    updated_at: '2025-01-11T16:00:00Z',&#10;    state: 'open',&#10;    merged_at: null,&#10;  },&#10;];&#10;&#10;export const mockPullRequestReviews = [&#10;  {&#10;    id: 1,&#10;    user: { login: 'github-actions[bot]', type: 'Bot' },&#10;    body: 'Copilot review: This code looks good!',&#10;    state: 'APPROVED',&#10;    submitted_at: '2025-01-10T11:00:00Z',&#10;  },&#10;  {&#10;    id: 2,&#10;    user: { login: 'teammate3', type: 'User' },&#10;    body: 'LGTM!',&#10;    state: 'APPROVED',&#10;    submitted_at: '2025-01-10T11:30:00Z',&#10;  },&#10;];&#10;&#10;// MSW request handlers&#10;export const handlers = [&#10;  // Mock GitHub Copilot usage metrics endpoint&#10;  http.get('https://api.github.com/orgs/:org/copilot/usage', () =&gt; {&#10;    return HttpResponse.json(mockCopilotUsageMetrics);&#10;  }),&#10;&#10;  // Mock GitHub Copilot seats endpoint&#10;  http.get('https://api.github.com/orgs/:org/copilot/billing/seats', () =&gt; {&#10;    return HttpResponse.json(mockCopilotSeats);&#10;  }),&#10;&#10;  // Mock GitHub authenticated user endpoint&#10;  http.get('https://api.github.com/user', () =&gt; {&#10;    return HttpResponse.json(mockCurrentUser);&#10;  }),&#10;&#10;  // Mock GitHub pull requests endpoint&#10;  http.get('https://api.github.com/repos/:owner/:repo/pulls', () =&gt; {&#10;    return HttpResponse.json(mockPullRequests);&#10;  }),&#10;&#10;  // Mock GitHub pull request reviews endpoint&#10;  http.get(&#10;    'https://api.github.com/repos/:owner/:repo/pulls/:pull_number/reviews',&#10;    () =&gt; {&#10;      return HttpResponse.json(mockPullRequestReviews);&#10;    },&#10;  ),&#10;&#10;  // Mock error scenarios&#10;  http.get('https://api.github.com/orgs/invalid-org/copilot/usage', () =&gt; {&#10;    return HttpResponse.json({ message: 'Not Found' }, { status: 404 });&#10;  }),&#10;];&#10;&#10;// Create MSW server&#10;export const server = setupServer(...handlers);&#10;&#10;// Setup MSW&#10;beforeAll(() =&gt; {&#10;  server.listen({ onUnhandledRequest: 'error' });&#10;});&#10;&#10;afterEach(() =&gt; {&#10;  server.resetHandlers();&#10;});&#10;&#10;afterAll(() =&gt; {&#10;  server.close();&#10;});&#10;" />
              <option name="updatedContent" value="import { setupServer } from 'msw/node';&#10;import { http, HttpResponse } from 'msw';&#10;import { beforeAll, afterEach, afterAll } from 'vitest';&#10;&#10;// Type definitions for GitHub API responses&#10;export interface GitHubUser {&#10;  login: string;&#10;  id: number;&#10;  company: string | null;&#10;  email: string | null;&#10;  name: string | null;&#10;}&#10;&#10;export interface CopilotUsageBreakdown {&#10;  language: string;&#10;  editor: string;&#10;  suggestions_count: number;&#10;  acceptances_count: number;&#10;  lines_suggested: number;&#10;  lines_accepted: number;&#10;  active_users: number;&#10;}&#10;&#10;export interface CopilotUsageMetrics {&#10;  day: string;&#10;  total_suggestions_count: number;&#10;  total_acceptances_count: number;&#10;  total_lines_suggested: number;&#10;  total_lines_accepted: number;&#10;  total_active_users: number;&#10;  breakdown: CopilotUsageBreakdown[];&#10;}&#10;&#10;export interface CopilotSeatAssignee {&#10;  login: string;&#10;  id: number;&#10;  type: string;&#10;}&#10;&#10;export interface CopilotSeat {&#10;  assignee: CopilotSeatAssignee;&#10;  assigning_team: null;&#10;  pending_cancellation_date: string | null;&#10;  last_activity_at: string;&#10;  last_activity_editor: string;&#10;  created_at: string;&#10;  updated_at: string;&#10;}&#10;&#10;export interface CopilotSeats {&#10;  total_seats: number;&#10;  seats: CopilotSeat[];&#10;}&#10;&#10;export interface PullRequestUser {&#10;  login: string;&#10;  id: number;&#10;  type: string;&#10;}&#10;&#10;export interface PullRequest {&#10;  number: number;&#10;  title: string;&#10;  user: PullRequestUser;&#10;  created_at: string;&#10;  updated_at: string;&#10;  state: string;&#10;}&#10;&#10;export interface PullRequestReviewUser {&#10;  login: string;&#10;  id: number;&#10;  type: 'User' | 'Bot';&#10;}&#10;&#10;export interface PullRequestReview {&#10;  id: number;&#10;  user: PullRequestReviewUser;&#10;  state: string;&#10;  submitted_at: string;&#10;  body: string;&#10;}&#10;&#10;export interface CopilotSummary {&#10;  period: {&#10;    days: number;&#10;    since: string;&#10;    until: string;&#10;  };&#10;  usage_metrics: CopilotUsageMetrics[];&#10;  seat_info: CopilotSeats;&#10;  summary: {&#10;    total_seats: number;&#10;    total_active_users: number;&#10;    total_suggestions: number;&#10;    total_acceptances: number;&#10;    acceptance_rate: number;&#10;  };&#10;}&#10;&#10;// Mock data&#10;export const mockCurrentUser: GitHubUser = {&#10;  login: 'advait-incubyte',&#10;  id: 12345,&#10;  company: '@incubyte',&#10;  email: 'advait@incubyte.co',&#10;  name: 'Advait Maindalkar',&#10;};&#10;&#10;export const mockCopilotUsageMetrics: CopilotUsageMetrics[] = [&#10;  {&#10;    day: '2025-07-27',&#10;    total_suggestions_count: 150,&#10;    total_acceptances_count: 75,&#10;    total_lines_suggested: 300,&#10;    total_lines_accepted: 150,&#10;    total_active_users: 3,&#10;    breakdown: [&#10;      {&#10;        language: 'typescript',&#10;        editor: 'vscode',&#10;        suggestions_count: 100,&#10;        acceptances_count: 50,&#10;        lines_suggested: 200,&#10;        lines_accepted: 100,&#10;        active_users: 2,&#10;      },&#10;      {&#10;        language: 'javascript',&#10;        editor: 'vscode',&#10;        suggestions_count: 50,&#10;        acceptances_count: 25,&#10;        lines_suggested: 100,&#10;        lines_accepted: 50,&#10;        active_users: 1,&#10;      },&#10;    ],&#10;  },&#10;];&#10;&#10;export const mockCopilotSeats: CopilotSeats = {&#10;  total_seats: 5,&#10;  seats: [&#10;    {&#10;      assignee: {&#10;        login: 'teammate1',&#10;        id: 11111,&#10;        type: 'User',&#10;      },&#10;      assigning_team: null,&#10;      pending_cancellation_date: null,&#10;      last_activity_at: '2025-07-27T10:00:00Z',&#10;      last_activity_editor: 'vscode',&#10;      created_at: '2025-01-01T00:00:00Z',&#10;      updated_at: '2025-07-27T10:00:00Z',&#10;    },&#10;    {&#10;      assignee: {&#10;        login: 'teammate2',&#10;        id: 22222,&#10;        type: 'User',&#10;      },&#10;      assigning_team: null,&#10;      pending_cancellation_date: null,&#10;      last_activity_at: '2025-07-26T15:30:00Z',&#10;      last_activity_editor: 'vscode',&#10;      created_at: '2025-01-01T00:00:00Z',&#10;      updated_at: '2025-07-26T15:30:00Z',&#10;    },&#10;    {&#10;      assignee: {&#10;        login: 'teammate3',&#10;        id: 33333,&#10;        type: 'User',&#10;      },&#10;      assigning_team: null,&#10;      pending_cancellation_date: null,&#10;      last_activity_at: '2025-07-25T09:15:00Z',&#10;      last_activity_editor: 'vscode',&#10;      created_at: '2025-01-01T00:00:00Z',&#10;      updated_at: '2025-07-25T09:15:00Z',&#10;    },&#10;  ],&#10;};&#10;&#10;export const mockPullRequests: PullRequest[] = [&#10;  {&#10;    number: 123,&#10;    title: 'feat: add new feature',&#10;    user: {&#10;      login: 'teammate1',&#10;      id: 11111,&#10;      type: 'User',&#10;    },&#10;    created_at: '2025-07-20T10:00:00Z',&#10;    updated_at: '2025-07-21T10:00:00Z',&#10;    state: 'open',&#10;  },&#10;  {&#10;    number: 124,&#10;    title: 'fix: resolve bug in auth',&#10;    user: {&#10;      login: 'teammate2',&#10;      id: 22222,&#10;      type: 'User',&#10;    },&#10;    created_at: '2025-07-19T14:30:00Z',&#10;    updated_at: '2025-07-20T14:30:00Z',&#10;    state: 'closed',&#10;  },&#10;];&#10;&#10;export const mockPullRequestReviews: PullRequestReview[] = [&#10;  {&#10;    id: 1001,&#10;    user: {&#10;      login: 'github-actions[bot]',&#10;      id: 41898282,&#10;      type: 'Bot',&#10;    },&#10;    state: 'commented',&#10;    submitted_at: '2025-07-21T10:30:00Z',&#10;    body: 'GitHub Copilot review: This code looks good!',&#10;  },&#10;  {&#10;    id: 1002,&#10;    user: {&#10;      login: 'teammate3',&#10;      id: 33333,&#10;      type: 'User',&#10;    },&#10;    state: 'approved',&#10;    submitted_at: '2025-07-21T11:00:00Z',&#10;    body: 'LGTM! Great work on this feature.',&#10;  },&#10;];&#10;&#10;// MSW server setup&#10;const handlers = [&#10;  // GitHub User API&#10;  http.get('https://api.github.com/user', () =&gt; {&#10;    return HttpResponse.json(mockCurrentUser);&#10;  }),&#10;&#10;  // Copilot Usage Metrics API&#10;  http.get('https://api.github.com/orgs/:org/copilot/usage', () =&gt; {&#10;    return HttpResponse.json(mockCopilotUsageMetrics);&#10;  }),&#10;&#10;  // Copilot Seats API&#10;  http.get('https://api.github.com/orgs/:org/copilot/billing/seats', () =&gt; {&#10;    return HttpResponse.json(mockCopilotSeats);&#10;  }),&#10;&#10;  // Pull Requests API&#10;  http.get('https://api.github.com/repos/:org/:repo/pulls', () =&gt; {&#10;    return HttpResponse.json(mockPullRequests);&#10;  }),&#10;&#10;  // Pull Request Reviews API&#10;  http.get('https://api.github.com/repos/:org/:repo/pulls/:pullNumber/reviews', () =&gt; {&#10;    return HttpResponse.json(mockPullRequestReviews);&#10;  }),&#10;];&#10;&#10;export const server = setupServer(...handlers);&#10;&#10;// Setup MSW&#10;beforeAll(() =&gt; {&#10;  server.listen({ onUnhandledRequest: 'error' });&#10;});&#10;&#10;afterEach(() =&gt; {&#10;  server.resetHandlers();&#10;});&#10;&#10;afterAll(() =&gt; {&#10;  server.close();&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/apps/frontend/.gitignore">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/apps/frontend/.gitignore" />
              <option name="updatedContent" value="# Logs&#10;logs&#10;*.log&#10;npm-debug.log*&#10;yarn-debug.log*&#10;yarn-error.log*&#10;pnpm-debug.log*&#10;lerna-debug.log*&#10;&#10;node_modules&#10;dist&#10;dist-ssr&#10;*.local&#10;&#10;# Editor directories and files&#10;.vscode/*&#10;!.vscode/extensions.json&#10;.idea&#10;.DS_Store&#10;*.suo&#10;*.ntvs*&#10;*.njsproj&#10;*.sln&#10;*.sw?&#10;&#10;# Environment variables&#10;.env&#10;.env.local&#10;.env.development.local&#10;.env.test.local&#10;.env.production.local" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/apps/frontend/index.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/apps/frontend/index.html" />
              <option name="updatedContent" value="&lt;!doctype html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;  &lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot; /&gt;&#10;    &lt;link rel=&quot;icon&quot; type=&quot;image/svg+xml&quot; href=&quot;/vite.svg&quot; /&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;&#10;    &lt;title&gt;Copilot Stats Dashboard&lt;/title&gt;&#10;  &lt;/head&gt;&#10;  &lt;body&gt;&#10;    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;&#10;    &lt;script type=&quot;module&quot; src=&quot;/src/main.tsx&quot;&gt;&lt;/script&gt;&#10;  &lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/apps/frontend/package.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/apps/frontend/package.json" />
              <option name="originalContent" value="{&#10;  &quot;name&quot;: &quot;@copilot-stats/frontend&quot;,&#10;  &quot;private&quot;: true,&#10;  &quot;version&quot;: &quot;0.0.0&quot;,&#10;  &quot;type&quot;: &quot;module&quot;,&#10;  &quot;scripts&quot;: {&#10;    &quot;dev&quot;: &quot;vite&quot;,&#10;    &quot;build&quot;: &quot;tsc &amp;&amp; vite build&quot;,&#10;    &quot;lint&quot;: &quot;eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0&quot;,&#10;    &quot;preview&quot;: &quot;vite preview&quot;,&#10;    &quot;start&quot;: &quot;vite&quot;,&#10;    &quot;start:dev&quot;: &quot;vite&quot;&#10;  },&#10;  &quot;dependencies&quot;: {&#10;    &quot;@tanstack/react-query&quot;: &quot;^5.56.2&quot;,&#10;    &quot;@tanstack/react-query-devtools&quot;: &quot;^5.56.2&quot;,&#10;    &quot;react&quot;: &quot;^18.3.1&quot;,&#10;    &quot;react-dom&quot;: &quot;^18.3.1&quot;,&#10;    &quot;axios&quot;: &quot;^1.7.7&quot;&#10;  },&#10;  &quot;devDependencies&quot;: {&#10;    &quot;@eslint/js&quot;: &quot;^9.9.1&quot;,&#10;    &quot;@types/react&quot;: &quot;^18.3.5&quot;,&#10;    &quot;@types/react-dom&quot;: &quot;^18.3.0&quot;,&#10;    &quot;@typescript-eslint/eslint-plugin&quot;: &quot;^8.5.0&quot;,&#10;    &quot;@typescript-eslint/parser&quot;: &quot;^8.5.0&quot;,&#10;    &quot;@vitejs/plugin-react&quot;: &quot;^4.3.1&quot;,&#10;    &quot;eslint&quot;: &quot;^9.9.1&quot;,&#10;    &quot;eslint-plugin-react-hooks&quot;: &quot;^4.6.2&quot;,&#10;    &quot;eslint-plugin-react-refresh&quot;: &quot;^0.4.12&quot;,&#10;    &quot;globals&quot;: &quot;^15.9.0&quot;,&#10;    &quot;typescript&quot;: &quot;^5.5.4&quot;,&#10;    &quot;typescript-eslint&quot;: &quot;^8.5.0&quot;,&#10;    &quot;vite&quot;: &quot;^5.4.6&quot;&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="{&#10;  &quot;name&quot;: &quot;@copilot-stats/frontend&quot;,&#10;  &quot;private&quot;: true,&#10;  &quot;version&quot;: &quot;0.0.0&quot;,&#10;  &quot;type&quot;: &quot;module&quot;,&#10;  &quot;scripts&quot;: {&#10;    &quot;dev&quot;: &quot;vite&quot;,&#10;    &quot;build&quot;: &quot;tsc &amp;&amp; vite build&quot;,&#10;    &quot;lint&quot;: &quot;eslint . --report-unused-disable-directives --max-warnings 0&quot;,&#10;    &quot;preview&quot;: &quot;vite preview&quot;,&#10;    &quot;start&quot;: &quot;vite&quot;,&#10;    &quot;start:dev&quot;: &quot;vite&quot;&#10;  },&#10;  &quot;dependencies&quot;: {&#10;    &quot;@tanstack/react-query&quot;: &quot;^5.56.2&quot;,&#10;    &quot;@tanstack/react-query-devtools&quot;: &quot;^5.56.2&quot;,&#10;    &quot;react&quot;: &quot;^18.3.1&quot;,&#10;    &quot;react-dom&quot;: &quot;^18.3.1&quot;,&#10;    &quot;axios&quot;: &quot;^1.7.7&quot;&#10;  },&#10;  &quot;devDependencies&quot;: {&#10;    &quot;@eslint/js&quot;: &quot;^9.9.1&quot;,&#10;    &quot;@types/react&quot;: &quot;^18.3.5&quot;,&#10;    &quot;@types/react-dom&quot;: &quot;^18.3.0&quot;,&#10;    &quot;@typescript-eslint/eslint-plugin&quot;: &quot;^8.5.0&quot;,&#10;    &quot;@typescript-eslint/parser&quot;: &quot;^8.5.0&quot;,&#10;    &quot;@vitejs/plugin-react&quot;: &quot;^4.3.1&quot;,&#10;    &quot;eslint&quot;: &quot;^9.9.1&quot;,&#10;    &quot;eslint-plugin-react-hooks&quot;: &quot;^4.6.2&quot;,&#10;    &quot;eslint-plugin-react-refresh&quot;: &quot;^0.4.12&quot;,&#10;    &quot;globals&quot;: &quot;^15.9.0&quot;,&#10;    &quot;typescript&quot;: &quot;^5.5.4&quot;,&#10;    &quot;typescript-eslint&quot;: &quot;^8.5.0&quot;,&#10;    &quot;vite&quot;: &quot;^5.4.6&quot;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/apps/frontend/src/components/CopilotStats.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/apps/frontend/src/components/CopilotStats.css" />
              <option name="originalContent" value=".copilot-stats {&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: 2rem;&#10;}&#10;&#10;.stats-overview {&#10;  margin-bottom: 1rem;&#10;}&#10;&#10;.stats-overview h2 {&#10;  margin-bottom: 1rem;&#10;  color: #646cff;&#10;  border-bottom: 2px solid rgba(100, 108, 255, 0.3);&#10;  padding-bottom: 0.5rem;&#10;}&#10;&#10;.overview-cards {&#10;  display: grid;&#10;  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));&#10;  gap: 1rem;&#10;  justify-content: center;&#10;  place-items: center;&#10;  max-width: 800px;&#10;  margin: 0 auto;&#10;}&#10;&#10;.stat-card {&#10;  background: rgba(255, 255, 255, 0.05);&#10;  border: 1px solid rgba(255, 255, 255, 0.1);&#10;  border-radius: 8px;&#10;  padding: 1.5rem;&#10;  text-align: center;&#10;}&#10;&#10;.stat-card h3 {&#10;  margin: 0 0 1rem 0;&#10;  color: #888;&#10;  font-size: 0.9rem;&#10;  text-transform: uppercase;&#10;  letter-spacing: 0.5px;&#10;}&#10;&#10;.stat-number {&#10;  font-size: 2.5rem;&#10;  font-weight: bold;&#10;  color: #646cff;&#10;  display: block;&#10;}&#10;&#10;.ai-usage-breakdown h2 {&#10;  margin-bottom: 1rem;&#10;  color: #646cff;&#10;  border-bottom: 2px solid rgba(100, 108, 255, 0.3);&#10;  padding-bottom: 0.5rem;&#10;}&#10;&#10;.usage-categories {&#10;  display: grid;&#10;  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));&#10;  gap: 1rem;&#10;  justify-content: center;&#10;  place-items: center;&#10;  max-width: 1200px;&#10;  margin: 0 auto;&#10;}&#10;&#10;.category-card {&#10;  background: rgba(255, 255, 255, 0.05);&#10;  border: 1px solid rgba(255, 255, 255, 0.1);&#10;  border-radius: 8px;&#10;  padding: 1.5rem;&#10;}&#10;&#10;.category-header {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 0.75rem;&#10;  margin-bottom: 0.5rem;&#10;}&#10;&#10;.category-indicator {&#10;  width: 12px;&#10;  height: 12px;&#10;  border-radius: 50%;&#10;}&#10;&#10;.category-header h3 {&#10;  margin: 0;&#10;  font-size: 1.1rem;&#10;  color: white;&#10;}&#10;&#10;.category-description {&#10;  color: #888;&#10;  font-size: 0.9rem;&#10;  margin: 0.5rem 0 1rem 0;&#10;}&#10;&#10;.category-stats {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 0.5rem;&#10;  margin-bottom: 1rem;&#10;}&#10;&#10;.category-stats .count {&#10;  font-size: 1.5rem;&#10;  font-weight: bold;&#10;  color: white;&#10;}&#10;&#10;.category-stats .percentage {&#10;  color: #888;&#10;  font-size: 0.9rem;&#10;}&#10;&#10;.progress-bar {&#10;  width: 100%;&#10;  height: 8px;&#10;  background-color: rgba(255, 255, 255, 0.1);&#10;  border-radius: 4px;&#10;  overflow: hidden;&#10;}&#10;&#10;.progress-fill {&#10;  height: 100%;&#10;  transition: width 0.3s ease;&#10;  border-radius: 4px;&#10;}&#10;&#10;.pull-requests-list h2 {&#10;  margin-bottom: 1rem;&#10;  color: #646cff;&#10;  border-bottom: 2px solid rgba(100, 108, 255, 0.3);&#10;  padding-bottom: 0.5rem;&#10;}&#10;&#10;.no-data {&#10;  text-align: center;&#10;  color: #888;&#10;  font-style: italic;&#10;  padding: 2rem;&#10;}&#10;&#10;.pr-list {&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: 1rem;&#10;}&#10;&#10;.pr-card {&#10;  background: rgba(255, 255, 255, 0.05);&#10;  border: 1px solid rgba(255, 255, 255, 0.1);&#10;  border-radius: 8px;&#10;  padding: 1.5rem;&#10;  transition: all 0.3s ease;&#10;}&#10;&#10;.pr-card:hover {&#10;  border-color: rgba(100, 108, 255, 0.5);&#10;  background: rgba(255, 255, 255, 0.08);&#10;}&#10;&#10;.pr-header {&#10;  display: flex;&#10;  justify-content: space-between;&#10;  align-items: flex-start;&#10;  margin-bottom: 1rem;&#10;  gap: 1rem;&#10;}&#10;&#10;.pr-header h3 {&#10;  margin: 0;&#10;  flex: 1;&#10;}&#10;&#10;.pr-header a {&#10;  color: #646cff;&#10;  text-decoration: none;&#10;  font-weight: 500;&#10;}&#10;&#10;.pr-header a:hover {&#10;  text-decoration: underline;&#10;}&#10;&#10;.pr-repo {&#10;  background: rgba(100, 108, 255, 0.2);&#10;  color: #646cff;&#10;  padding: 0.25rem 0.5rem;&#10;  border-radius: 4px;&#10;  font-size: 0.8rem;&#10;  font-weight: 500;&#10;  white-space: nowrap;&#10;}&#10;&#10;.pr-meta {&#10;  display: flex;&#10;  gap: 1rem;&#10;  margin-bottom: 1rem;&#10;  color: #888;&#10;  font-size: 0.9rem;&#10;}&#10;&#10;.ai-usage-tags {&#10;  display: flex;&#10;  flex-wrap: wrap;&#10;  gap: 0.5rem;&#10;  align-items: center;&#10;  margin-bottom: 1rem;&#10;}&#10;&#10;.tags-label {&#10;  font-weight: 500;&#10;  color: #888;&#10;  margin-right: 0.5rem;&#10;}&#10;&#10;.usage-tag {&#10;  padding: 0.25rem 0.75rem;&#10;  border-radius: 12px;&#10;  font-size: 0.8rem;&#10;  font-weight: 500;&#10;  color: white;&#10;  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);&#10;}&#10;&#10;.usage-tag.no-usage {&#10;  background-color: #666;&#10;  color: #ccc;&#10;}&#10;&#10;.copilot-review-info {&#10;  border-top: 1px solid rgba(255, 255, 255, 0.1);&#10;  padding-top: 1rem;&#10;  color: #ccc;&#10;}&#10;&#10;.review-body {&#10;  margin-top: 0.5rem;&#10;}&#10;&#10;.review-body details {&#10;  cursor: pointer;&#10;}&#10;&#10;.review-body summary {&#10;  color: #646cff;&#10;  font-weight: 500;&#10;  padding: 0.5rem 0;&#10;}&#10;&#10;.review-body p {&#10;  background: rgba(255, 255, 255, 0.05);&#10;  padding: 1rem;&#10;  border-radius: 4px;&#10;  margin: 0.5rem 0 0 0;&#10;  border-left: 3px solid #646cff;&#10;  color: #ddd;&#10;  font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;&#10;  font-size: 0.9rem;&#10;  line-height: 1.4;&#10;}&#10;&#10;/* Light mode adjustments */&#10;@media (prefers-color-scheme: light) {&#10;  .stat-card,&#10;  .category-card,&#10;  .pr-card {&#10;    background: rgba(0, 0, 0, 0.05);&#10;    border: 1px solid rgba(0, 0, 0, 0.1);&#10;  }&#10;&#10;  .pr-card:hover {&#10;    border-color: rgba(100, 108, 255, 0.5);&#10;    background: rgba(0, 0, 0, 0.08);&#10;  }&#10;&#10;  .category-header h3,&#10;  .category-stats .count {&#10;    color: #213547;&#10;  }&#10;&#10;  .progress-bar {&#10;    background-color: rgba(0, 0, 0, 0.1);&#10;  }&#10;&#10;  .copilot-review-info {&#10;    border-top: 1px solid rgba(0, 0, 0, 0.1);&#10;    color: #555;&#10;  }&#10;&#10;  .review-body p {&#10;    background: rgba(0, 0, 0, 0.05);&#10;    color: #333;&#10;  }&#10;}&#10;&#10;/* Responsive design */&#10;@media (max-width: 768px) {&#10;  .pr-header {&#10;    flex-direction: column;&#10;    align-items: stretch;&#10;  }&#10;&#10;  .pr-meta {&#10;    flex-direction: column;&#10;    gap: 0.5rem;&#10;  }&#10;&#10;  .controls {&#10;    flex-direction: column;&#10;    align-items: stretch;&#10;    gap: 1rem;&#10;  }&#10;&#10;  .usage-categories {&#10;    grid-template-columns: 1fr;&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value=".copilot-stats {&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: 2rem;&#10;  width: 100%;&#10;  max-width: 1200px;&#10;  margin: 0 auto;&#10;}&#10;&#10;.stats-overview {&#10;  margin-bottom: 1rem;&#10;}&#10;&#10;.stats-overview h2 {&#10;  margin-bottom: 1rem;&#10;  color: #646cff;&#10;  border-bottom: 2px solid rgba(100, 108, 255, 0.3);&#10;  padding-bottom: 0.5rem;&#10;}&#10;&#10;.overview-cards {&#10;  display: grid;&#10;  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));&#10;  gap: 1rem;&#10;  justify-content: center;&#10;  place-items: center;&#10;  max-width: 800px;&#10;  margin: 0 auto;&#10;}&#10;&#10;.stat-card {&#10;  background: rgba(255, 255, 255, 0.05);&#10;  border: 1px solid rgba(255, 255, 255, 0.1);&#10;  border-radius: 8px;&#10;  padding: 1.5rem;&#10;  text-align: center;&#10;}&#10;&#10;.stat-card h3 {&#10;  margin: 0 0 1rem 0;&#10;  color: #888;&#10;  font-size: 0.9rem;&#10;  text-transform: uppercase;&#10;  letter-spacing: 0.5px;&#10;}&#10;&#10;.stat-number {&#10;  font-size: 2.5rem;&#10;  font-weight: bold;&#10;  color: #646cff;&#10;  display: block;&#10;}&#10;&#10;.ai-usage-breakdown h2 {&#10;  margin-bottom: 1rem;&#10;  color: #646cff;&#10;  border-bottom: 2px solid rgba(100, 108, 255, 0.3);&#10;  padding-bottom: 0.5rem;&#10;}&#10;&#10;.usage-categories {&#10;  display: grid;&#10;  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));&#10;  gap: 1rem;&#10;  justify-content: center;&#10;  place-items: center;&#10;  max-width: 1200px;&#10;  margin: 0 auto;&#10;}&#10;&#10;.category-card {&#10;  background: rgba(255, 255, 255, 0.05);&#10;  border: 1px solid rgba(255, 255, 255, 0.1);&#10;  border-radius: 8px;&#10;  padding: 1.5rem;&#10;}&#10;&#10;.category-header {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 0.75rem;&#10;  margin-bottom: 0.5rem;&#10;}&#10;&#10;.category-indicator {&#10;  width: 12px;&#10;  height: 12px;&#10;  border-radius: 50%;&#10;}&#10;&#10;.category-header h3 {&#10;  margin: 0;&#10;  font-size: 1.1rem;&#10;  color: white;&#10;}&#10;&#10;.category-description {&#10;  color: #888;&#10;  font-size: 0.9rem;&#10;  margin: 0.5rem 0 1rem 0;&#10;}&#10;&#10;.category-stats {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 0.5rem;&#10;  margin-bottom: 1rem;&#10;}&#10;&#10;.category-stats .count {&#10;  font-size: 1.5rem;&#10;  font-weight: bold;&#10;  color: white;&#10;}&#10;&#10;.category-stats .percentage {&#10;  color: #888;&#10;  font-size: 0.9rem;&#10;}&#10;&#10;.progress-bar {&#10;  width: 100%;&#10;  height: 8px;&#10;  background-color: rgba(255, 255, 255, 0.1);&#10;  border-radius: 4px;&#10;  overflow: hidden;&#10;}&#10;&#10;.progress-fill {&#10;  height: 100%;&#10;  transition: width 0.3s ease;&#10;  border-radius: 4px;&#10;}&#10;&#10;.pull-requests-list h2 {&#10;  margin-bottom: 1rem;&#10;  color: #646cff;&#10;  border-bottom: 2px solid rgba(100, 108, 255, 0.3);&#10;  padding-bottom: 0.5rem;&#10;}&#10;&#10;.no-data {&#10;  text-align: center;&#10;  color: #888;&#10;  font-style: italic;&#10;  padding: 2rem;&#10;}&#10;&#10;.pr-list {&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: 1rem;&#10;}&#10;&#10;.pr-card {&#10;  background: rgba(255, 255, 255, 0.05);&#10;  border: 1px solid rgba(255, 255, 255, 0.1);&#10;  border-radius: 8px;&#10;  padding: 1.5rem;&#10;  transition: all 0.3s ease;&#10;}&#10;&#10;.pr-card:hover {&#10;  border-color: rgba(100, 108, 255, 0.5);&#10;  background: rgba(255, 255, 255, 0.08);&#10;}&#10;&#10;.pr-header {&#10;  display: flex;&#10;  justify-content: space-between;&#10;  align-items: flex-start;&#10;  margin-bottom: 1rem;&#10;  gap: 1rem;&#10;}&#10;&#10;.pr-header h3 {&#10;  margin: 0;&#10;  flex: 1;&#10;}&#10;&#10;.pr-header a {&#10;  color: #646cff;&#10;  text-decoration: none;&#10;  font-weight: 500;&#10;}&#10;&#10;.pr-header a:hover {&#10;  text-decoration: underline;&#10;}&#10;&#10;.pr-repo {&#10;  background: rgba(100, 108, 255, 0.2);&#10;  color: #646cff;&#10;  padding: 0.25rem 0.5rem;&#10;  border-radius: 4px;&#10;  font-size: 0.8rem;&#10;  font-weight: 500;&#10;  white-space: nowrap;&#10;}&#10;&#10;.pr-meta {&#10;  display: flex;&#10;  gap: 1rem;&#10;  margin-bottom: 1rem;&#10;  color: #888;&#10;  font-size: 0.9rem;&#10;}&#10;&#10;.ai-usage-tags {&#10;  display: flex;&#10;  flex-wrap: wrap;&#10;  gap: 0.5rem;&#10;  align-items: center;&#10;  margin-bottom: 1rem;&#10;}&#10;&#10;.tags-label {&#10;  font-weight: 500;&#10;  color: #888;&#10;  margin-right: 0.5rem;&#10;}&#10;&#10;.usage-tag {&#10;  padding: 0.25rem 0.75rem;&#10;  border-radius: 12px;&#10;  font-size: 0.8rem;&#10;  font-weight: 500;&#10;  color: white;&#10;  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);&#10;}&#10;&#10;.usage-tag.no-usage {&#10;  background-color: #666;&#10;  color: #ccc;&#10;}&#10;&#10;.copilot-review-info {&#10;  border-top: 1px solid rgba(255, 255, 255, 0.1);&#10;  padding-top: 1rem;&#10;  color: #ccc;&#10;}&#10;&#10;.review-body {&#10;  margin-top: 0.5rem;&#10;}&#10;&#10;.review-body details {&#10;  cursor: pointer;&#10;}&#10;&#10;.review-body summary {&#10;  color: #646cff;&#10;  font-weight: 500;&#10;  padding: 0.5rem 0;&#10;}&#10;&#10;.review-body p {&#10;  background: rgba(255, 255, 255, 0.05);&#10;  padding: 1rem;&#10;  border-radius: 4px;&#10;  margin: 0.5rem 0 0 0;&#10;  border-left: 3px solid #646cff;&#10;  color: #ddd;&#10;  font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;&#10;  font-size: 0.9rem;&#10;  line-height: 1.4;&#10;}&#10;&#10;/* Light mode adjustments */&#10;@media (prefers-color-scheme: light) {&#10;  .stat-card,&#10;  .category-card,&#10;  .pr-card {&#10;    background: rgba(0, 0, 0, 0.05);&#10;    border: 1px solid rgba(0, 0, 0, 0.1);&#10;  }&#10;&#10;  .pr-card:hover {&#10;    border-color: rgba(100, 108, 255, 0.5);&#10;    background: rgba(0, 0, 0, 0.08);&#10;  }&#10;&#10;  .category-header h3,&#10;  .category-stats .count {&#10;    color: #213547;&#10;  }&#10;&#10;  .progress-bar {&#10;    background-color: rgba(0, 0, 0, 0.1);&#10;  }&#10;&#10;  .copilot-review-info {&#10;    border-top: 1px solid rgba(0, 0, 0, 0.1);&#10;    color: #555;&#10;  }&#10;&#10;  .review-body p {&#10;    background: rgba(0, 0, 0, 0.05);&#10;    color: #333;&#10;  }&#10;}&#10;&#10;/* Responsive design */&#10;@media (max-width: 768px) {&#10;  .pr-header {&#10;    flex-direction: column;&#10;    align-items: stretch;&#10;  }&#10;&#10;  .pr-meta {&#10;    flex-direction: column;&#10;    gap: 0.5rem;&#10;  }&#10;&#10;  .controls {&#10;    flex-direction: column;&#10;    align-items: stretch;&#10;    gap: 1rem;&#10;  }&#10;&#10;  .usage-categories {&#10;    grid-template-columns: 1fr;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/apps/frontend/src/components/CopilotStats.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/apps/frontend/src/components/CopilotStats.tsx" />
              <option name="originalContent" value="import { AIUsageStats, CopilotUsageResponse } from '../services/github.service'&#10;import './CopilotStats.css'&#10;&#10;interface CopilotStatsProps {&#10;  data: CopilotUsageResponse&#10;}&#10;&#10;const CopilotStats = ({ data }: CopilotStatsProps) =&gt; {&#10;  const { pullRequestsReviewedByCopilot, stats } = data&#10;&#10;  // Calculate total AI usage across all categories&#10;  const totalAIUsage = Object.values(stats).reduce((sum, count) =&gt; sum + count, 0)&#10;&#10;  // Helper function to calculate percentage&#10;  const getPercentage = (count: number, total: number) =&gt; {&#10;    return total &gt; 0 ? ((count / total) * 100).toFixed(1) : '0'&#10;  }&#10;&#10;  // AI usage category labels and descriptions&#10;  const aiCategories = [&#10;    { key: 'AI_CODE', label: 'Code Generation', description: 'AI assisted code writing', color: '#4ade80' },&#10;    { key: 'AI_REVIEW', label: 'Code Review', description: 'AI assisted code review', color: '#3b82f6' },&#10;    { key: 'AI_DOCS', label: 'Documentation', description: 'AI assisted documentation', color: '#f59e0b' },&#10;    { key: 'AI_OTHER', label: 'Other Usage', description: 'Other AI assistance', color: '#8b5cf6' },&#10;  ]&#10;&#10;  return (&#10;    &lt;div className=&quot;copilot-stats&quot;&gt;&#10;      &lt;div className=&quot;stats-overview&quot;&gt;&#10;        &lt;h2&gt;Overview&lt;/h2&gt;&#10;        &lt;div className=&quot;overview-cards&quot;&gt;&#10;          &lt;div className=&quot;stat-card&quot;&gt;&#10;            &lt;h3&gt;Total PRs with Copilot Reviews&lt;/h3&gt;&#10;            &lt;span className=&quot;stat-number&quot;&gt;{pullRequestsReviewedByCopilot.total}&lt;/span&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;stat-card&quot;&gt;&#10;            &lt;h3&gt;Total AI Usage Instances&lt;/h3&gt;&#10;            &lt;span className=&quot;stat-number&quot;&gt;{totalAIUsage}&lt;/span&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;ai-usage-breakdown&quot;&gt;&#10;        &lt;h2&gt;AI Usage Breakdown&lt;/h2&gt;&#10;        &lt;div className=&quot;usage-categories&quot;&gt;&#10;          {aiCategories.map(({ key, label, description, color }) =&gt; {&#10;            const count = stats[key as keyof AIUsageStats]&#10;            const percentage = getPercentage(count, totalAIUsage)&#10;&#10;            return (&#10;              &lt;div key={key} className=&quot;category-card&quot;&gt;&#10;                &lt;div className=&quot;category-header&quot;&gt;&#10;                  &lt;div&#10;                    className=&quot;category-indicator&quot;&#10;                    style={{ backgroundColor: color }}&#10;                  &gt;&lt;/div&gt;&#10;                  &lt;h3&gt;{label}&lt;/h3&gt;&#10;                &lt;/div&gt;&#10;                &lt;p className=&quot;category-description&quot;&gt;{description}&lt;/p&gt;&#10;                &lt;div className=&quot;category-stats&quot;&gt;&#10;                  &lt;span className=&quot;count&quot;&gt;{count}&lt;/span&gt;&#10;                  &lt;span className=&quot;percentage&quot;&gt;({percentage}%)&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;progress-bar&quot;&gt;&#10;                  &lt;div&#10;                    className=&quot;progress-fill&quot;&#10;                    style={{&#10;                      width: `${percentage}%`,&#10;                      backgroundColor: color&#10;                    }}&#10;                  &gt;&lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            )&#10;          })}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;pull-requests-list&quot;&gt;&#10;        &lt;h2&gt;Pull Requests with Copilot Reviews ({pullRequestsReviewedByCopilot.total})&lt;/h2&gt;&#10;        {pullRequestsReviewedByCopilot.pulls.length === 0 ? (&#10;          &lt;p className=&quot;no-data&quot;&gt;No pull requests found with Copilot reviews in the selected time range.&lt;/p&gt;&#10;        ) : (&#10;          &lt;div className=&quot;pr-list&quot;&gt;&#10;            {pullRequestsReviewedByCopilot.pulls.map((pr) =&gt; (&#10;              &lt;div key={`${pr.repo}-${pr.number}`} className=&quot;pr-card&quot;&gt;&#10;                &lt;div className=&quot;pr-header&quot;&gt;&#10;                  &lt;h3&gt;&#10;                    &lt;a href={pr.copilot_review.url} target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&#10;                      #{pr.number}: {pr.title}&#10;                    &lt;/a&gt;&#10;                  &lt;/h3&gt;&#10;                  &lt;span className=&quot;pr-repo&quot;&gt;{pr.repo}&lt;/span&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;pr-meta&quot;&gt;&#10;                  &lt;span className=&quot;pr-author&quot;&gt;By: {pr.author}&lt;/span&gt;&#10;                  &lt;span className=&quot;pr-date&quot;&gt;&#10;                    Closed: {new Date(pr.closed_at).toLocaleDateString()}&#10;                  &lt;/span&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;ai-usage-tags&quot;&gt;&#10;                  &lt;span className=&quot;tags-label&quot;&gt;AI Usage:&lt;/span&gt;&#10;                  {aiCategories.map(({ key, label, color }) =&gt; (&#10;                    pr.ai_usage[key as keyof AIUsageStats] &gt; 0 &amp;&amp; (&#10;                      &lt;span&#10;                        key={key}&#10;                        className=&quot;usage-tag&quot;&#10;                        style={{ backgroundColor: color }}&#10;                      &gt;&#10;                        {label}&#10;                      &lt;/span&gt;&#10;                    )&#10;                  ))}&#10;                  {Object.values(pr.ai_usage).every(val =&gt; val === 0) &amp;&amp; (&#10;                    &lt;span className=&quot;usage-tag no-usage&quot;&gt;No AI usage detected&lt;/span&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;copilot-review-info&quot;&gt;&#10;                  &lt;strong&gt;Copilot Review by:&lt;/strong&gt; {pr.copilot_review.login}&#10;                  {pr.copilot_review.body &amp;&amp; (&#10;                    &lt;div className=&quot;review-body&quot;&gt;&#10;                      &lt;details&gt;&#10;                        &lt;summary&gt;View Review&lt;/summary&gt;&#10;                        &lt;p&gt;{pr.copilot_review.body}&lt;/p&gt;&#10;                      &lt;/details&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}&#10;&#10;export default CopilotStats&#10;" />
              <option name="updatedContent" value="import { AIUsageStats, CopilotUsageResponse } from '../services/github.service'&#10;import './CopilotStats.css'&#10;&#10;interface CopilotStatsProps {&#10;  data: CopilotUsageResponse&#10;}&#10;&#10;const CopilotStats = ({ data }: CopilotStatsProps) =&gt; {&#10;  // Add defensive checks to prevent runtime errors&#10;  if (!data) {&#10;    return (&#10;      &lt;div className=&quot;copilot-stats&quot;&gt;&#10;        &lt;div className=&quot;loading&quot;&gt;&#10;          &lt;p&gt;No data available&lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    )&#10;  }&#10;&#10;  const { pullRequestsReviewedByCopilot, stats } = data&#10;&#10;  // Ensure stats exists and has valid structure&#10;  if (!stats || typeof stats !== 'object') {&#10;    return (&#10;      &lt;div className=&quot;copilot-stats&quot;&gt;&#10;        &lt;div className=&quot;error&quot;&gt;&#10;          &lt;h3&gt;Data Error&lt;/h3&gt;&#10;          &lt;p&gt;Invalid statistics data received from server&lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    )&#10;  }&#10;&#10;  // Calculate total AI usage across all categories with safe fallback&#10;  const totalAIUsage = Object.values(stats).reduce((sum, count) =&gt; sum + (count || 0), 0)&#10;&#10;  // Helper function to calculate percentage&#10;  const getPercentage = (count: number, total: number) =&gt; {&#10;    return total &gt; 0 ? ((count / total) * 100).toFixed(1) : '0'&#10;  }&#10;&#10;  // AI usage category labels and descriptions&#10;  const aiCategories = [&#10;    { key: 'AI_CODE', label: 'Code Generation', description: 'AI assisted code writing', color: '#4ade80' },&#10;    { key: 'AI_REVIEW', label: 'Code Review', description: 'AI assisted code review', color: '#3b82f6' },&#10;    { key: 'AI_DOCS', label: 'Documentation', description: 'AI assisted documentation', color: '#f59e0b' },&#10;    { key: 'AI_OTHER', label: 'Other Usage', description: 'Other AI assistance', color: '#8b5cf6' },&#10;  ]&#10;&#10;  return (&#10;    &lt;div className=&quot;copilot-stats&quot;&gt;&#10;      &lt;div className=&quot;stats-overview&quot;&gt;&#10;        &lt;h2&gt;Overview&lt;/h2&gt;&#10;        &lt;div className=&quot;overview-cards&quot;&gt;&#10;          &lt;div className=&quot;stat-card&quot;&gt;&#10;            &lt;h3&gt;Total PRs with Copilot Reviews&lt;/h3&gt;&#10;            &lt;span className=&quot;stat-number&quot;&gt;{pullRequestsReviewedByCopilot.total}&lt;/span&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;stat-card&quot;&gt;&#10;            &lt;h3&gt;Total AI Usage Instances&lt;/h3&gt;&#10;            &lt;span className=&quot;stat-number&quot;&gt;{totalAIUsage}&lt;/span&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;ai-usage-breakdown&quot;&gt;&#10;        &lt;h2&gt;AI Usage Breakdown&lt;/h2&gt;&#10;        &lt;div className=&quot;usage-categories&quot;&gt;&#10;          {aiCategories.map(({ key, label, description, color }) =&gt; {&#10;            const count = stats[key as keyof AIUsageStats]&#10;            const percentage = getPercentage(count, totalAIUsage)&#10;&#10;            return (&#10;              &lt;div key={key} className=&quot;category-card&quot;&gt;&#10;                &lt;div className=&quot;category-header&quot;&gt;&#10;                  &lt;div&#10;                    className=&quot;category-indicator&quot;&#10;                    style={{ backgroundColor: color }}&#10;                  &gt;&lt;/div&gt;&#10;                  &lt;h3&gt;{label}&lt;/h3&gt;&#10;                &lt;/div&gt;&#10;                &lt;p className=&quot;category-description&quot;&gt;{description}&lt;/p&gt;&#10;                &lt;div className=&quot;category-stats&quot;&gt;&#10;                  &lt;span className=&quot;count&quot;&gt;{count}&lt;/span&gt;&#10;                  &lt;span className=&quot;percentage&quot;&gt;({percentage}%)&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;progress-bar&quot;&gt;&#10;                  &lt;div&#10;                    className=&quot;progress-fill&quot;&#10;                    style={{&#10;                      width: `${percentage}%`,&#10;                      backgroundColor: color&#10;                    }}&#10;                  &gt;&lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            )&#10;          })}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;pull-requests-list&quot;&gt;&#10;        &lt;h2&gt;Pull Requests with Copilot Reviews ({pullRequestsReviewedByCopilot.total})&lt;/h2&gt;&#10;        {pullRequestsReviewedByCopilot.pulls.length === 0 ? (&#10;          &lt;p className=&quot;no-data&quot;&gt;No pull requests found with Copilot reviews in the selected time range.&lt;/p&gt;&#10;        ) : (&#10;          &lt;div className=&quot;pr-list&quot;&gt;&#10;            {pullRequestsReviewedByCopilot.pulls.map((pr) =&gt; (&#10;              &lt;div key={`${pr.repo}-${pr.number}`} className=&quot;pr-card&quot;&gt;&#10;                &lt;div className=&quot;pr-header&quot;&gt;&#10;                  &lt;h3&gt;&#10;                    &lt;a href={pr.copilot_review.url} target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&#10;                      #{pr.number}: {pr.title}&#10;                    &lt;/a&gt;&#10;                  &lt;/h3&gt;&#10;                  &lt;span className=&quot;pr-repo&quot;&gt;{pr.repo}&lt;/span&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;pr-meta&quot;&gt;&#10;                  &lt;span className=&quot;pr-author&quot;&gt;By: {pr.author}&lt;/span&gt;&#10;                  &lt;span className=&quot;pr-date&quot;&gt;&#10;                    Closed: {new Date(pr.closed_at).toLocaleDateString()}&#10;                  &lt;/span&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;ai-usage-tags&quot;&gt;&#10;                  &lt;span className=&quot;tags-label&quot;&gt;AI Usage:&lt;/span&gt;&#10;                  {aiCategories.map(({ key, label, color }) =&gt; (&#10;                    pr.ai_usage[key as keyof AIUsageStats] &gt; 0 &amp;&amp; (&#10;                      &lt;span&#10;                        key={key}&#10;                        className=&quot;usage-tag&quot;&#10;                        style={{ backgroundColor: color }}&#10;                      &gt;&#10;                        {label}&#10;                      &lt;/span&gt;&#10;                    )&#10;                  ))}&#10;                  {Object.values(pr.ai_usage).every(val =&gt; val === 0) &amp;&amp; (&#10;                    &lt;span className=&quot;usage-tag no-usage&quot;&gt;No AI usage detected&lt;/span&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;copilot-review-info&quot;&gt;&#10;                  &lt;strong&gt;Copilot Review by:&lt;/strong&gt; {pr.copilot_review.login}&#10;                  {pr.copilot_review.body &amp;&amp; (&#10;                    &lt;div className=&quot;review-body&quot;&gt;&#10;                      &lt;details&gt;&#10;                        &lt;summary&gt;View Review&lt;/summary&gt;&#10;                        &lt;p&gt;{pr.copilot_review.body}&lt;/p&gt;&#10;                      &lt;/details&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}&#10;&#10;export default CopilotStats" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/apps/frontend/src/index.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/apps/frontend/src/index.css" />
              <option name="updatedContent" value=":root {&#10;  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;&#10;  line-height: 1.5;&#10;  font-weight: 400;&#10;&#10;  color-scheme: light dark;&#10;  color: rgba(255, 255, 255, 0.87);&#10;  background-color: #242424;&#10;&#10;  font-synthesis: none;&#10;  text-rendering: optimizeLegibility;&#10;  -webkit-font-smoothing: antialiased;&#10;  -moz-osx-font-smoothing: grayscale;&#10;  -webkit-text-size-adjust: 100%;&#10;}&#10;&#10;a {&#10;  font-weight: 500;&#10;  color: #646cff;&#10;  text-decoration: inherit;&#10;}&#10;a:hover {&#10;  color: #535bf2;&#10;}&#10;&#10;body {&#10;  margin: 0;&#10;  display: flex;&#10;  place-items: center;&#10;  min-width: 320px;&#10;  min-height: 100vh;&#10;}&#10;&#10;h1 {&#10;  font-size: 3.2em;&#10;  line-height: 1.1;&#10;}&#10;&#10;button {&#10;  border-radius: 8px;&#10;  border: 1px solid transparent;&#10;  padding: 0.6em 1.2em;&#10;  font-size: 1em;&#10;  font-weight: 500;&#10;  font-family: inherit;&#10;  background-color: #1a1a1a;&#10;  color: white;&#10;  cursor: pointer;&#10;  transition: border-color 0.25s;&#10;}&#10;button:hover {&#10;  border-color: #646cff;&#10;}&#10;button:focus,&#10;button:focus-visible {&#10;  outline: 4px auto -webkit-focus-ring-color;&#10;}&#10;&#10;@media (prefers-color-scheme: light) {&#10;  :root {&#10;    color: #213547;&#10;    background-color: #ffffff;&#10;  }&#10;  a:hover {&#10;    color: #747bff;&#10;  }&#10;  button {&#10;    background-color: #f9f9f9;&#10;    color: #213547;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/apps/frontend/src/main.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/apps/frontend/src/main.tsx" />
              <option name="originalContent" value="import React from 'react'&#10;import ReactDOM from 'react-dom/client'&#10;import { QueryClient, QueryClientProvider } from '@tanstack/react-query'&#10;import { ReactQueryDevtools } from '@tanstack/react-query-devtools'&#10;import App from './App.tsx'&#10;import './index.css'&#10;&#10;const FIVE_MINUTES = 5 * 60 * 1000&#10;&#10;// Create a QueryClient instance&#10;const queryClient = new QueryClient({&#10;  defaultOptions: {&#10;    queries: {&#10;      staleTime: FIVE_MINUTES, // 5 minutes&#10;      retry: 3,&#10;      refetchOnWindowFocus: false,&#10;    },&#10;  },&#10;})&#10;&#10;ReactDOM.createRoot(document.getElementById('root')!).render(&#10;  &lt;React.StrictMode&gt;&#10;    &lt;QueryClientProvider client={queryClient}&gt;&#10;      &lt;App /&gt;&#10;      &lt;ReactQueryDevtools initialIsOpen={false} /&gt;&#10;    &lt;/QueryClientProvider&gt;&#10;  &lt;/React.StrictMode&gt;&#10;)&#10;" />
              <option name="updatedContent" value="import React from 'react'&#10;import ReactDOM from 'react-dom/client'&#10;import { QueryClient, QueryClientProvider } from '@tanstack/react-query'&#10;import { ReactQueryDevtools } from '@tanstack/react-query-devtools'&#10;import App from './App.tsx'&#10;import './index.css'&#10;&#10;const queryClient = new QueryClient({&#10;  defaultOptions: {&#10;    queries: {&#10;      staleTime: Infinity, // Data never becomes stale automatically&#10;      retry: false, // No automatic retries&#10;      refetchOnWindowFocus: false,&#10;      refetchOnMount: false, // Don't refetch when component remounts&#10;      refetchOnReconnect: false, // Don't refetch when network reconnects&#10;    },&#10;  },&#10;})&#10;&#10;ReactDOM.createRoot(document.getElementById('root')!).render(&#10;  &lt;React.StrictMode&gt;&#10;    &lt;QueryClientProvider client={queryClient}&gt;&#10;      &lt;App /&gt;&#10;      &lt;ReactQueryDevtools initialIsOpen={false} /&gt;&#10;    &lt;/QueryClientProvider&gt;&#10;  &lt;/React.StrictMode&gt;&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/apps/frontend/src/services/github.service.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/apps/frontend/src/services/github.service.ts" />
              <option name="originalContent" value="import axios from 'axios'&#10;&#10;// Get backend URL from environment variable or fallback to default&#10;const VITE_BACKEND_BASE_URL = import.meta.env.VITE_BACKEND_BASE_URL&#10;&#10;// Configure axios instance with base URL for your backend&#10;const api = axios.create({&#10;  baseURL: VITE_BACKEND_BASE_URL,&#10;  timeout: 30000, // 30 second timeout for API calls&#10;})&#10;&#10;// Types for the API response based on your backend service&#10;export interface AIUsageStats {&#10;  AI_CODE: number&#10;  AI_REVIEW: number&#10;  AI_DOCS: number&#10;  AI_OTHER: number&#10;}&#10;&#10;export interface PullRequestData {&#10;  number: number&#10;  title: string&#10;  author: string&#10;  closed_at: string&#10;  repo: string&#10;  ai_usage: AIUsageStats&#10;  copilot_review: {&#10;    login: string&#10;    type: string&#10;    body: string&#10;    url: string&#10;  }&#10;}&#10;&#10;export interface CopilotUsageResponse {&#10;  pullRequestsReviewedByCopilot: {&#10;    pulls: PullRequestData[]&#10;    total: number&#10;  }&#10;  stats: AIUsageStats&#10;}&#10;&#10;/**&#10; * Fetch Copilot usage statistics from the backend&#10; * @param daysRange - Number of days to look back for PR analysis&#10; * @returns Promise with copilot usage data&#10; */&#10;export const getCopilotUsageStats = async (daysRange: number = 7): Promise&lt;CopilotUsageResponse&gt; =&gt; {&#10;  try {&#10;    const response = await api.get&lt;CopilotUsageResponse&gt;('/github/copilot/usage', {&#10;      params: { daysRange }&#10;    })&#10;&#10;    return response.data&#10;  } catch (error) {&#10;    if (axios.isAxiosError(error)) {&#10;      throw new Error(`Failed to fetch copilot stats: ${error.response?.data?.message || error.message}`)&#10;    }&#10;    throw new Error('An unexpected error occurred while fetching copilot stats')&#10;  }&#10;}&#10;&#10;/**&#10; * Test endpoint to verify backend connection&#10; * @returns Promise with current GitHub user data&#10; */&#10;export const getCurrentUser = async () =&gt; {&#10;  try {&#10;    const response = await api.get('/github/user')&#10;    return response.data&#10;  } catch (error) {&#10;    if (axios.isAxiosError(error)) {&#10;      throw new Error(`Failed to fetch user: ${error.response?.data?.message || error.message}`)&#10;    }&#10;    throw new Error('An unexpected error occurred while fetching user data')&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import axios from 'axios'&#10;&#10;// Get backend URL from environment variable or fallback to default&#10;const VITE_BACKEND_BASE_URL = import.meta.env.VITE_BACKEND_BASE_URL&#10;&#10;// Configure axios instance with base URL for your backend&#10;const api = axios.create({&#10;  baseURL: VITE_BACKEND_BASE_URL,&#10;  timeout: 120000, // 2 minutes - good balance for GitHub API operations&#10;})&#10;&#10;// Types for the API response based on your backend service&#10;export interface AIUsageStats {&#10;  AI_CODE: number&#10;  AI_REVIEW: number&#10;  AI_DOCS: number&#10;  AI_OTHER: number&#10;}&#10;&#10;export interface PullRequestData {&#10;  number: number&#10;  title: string&#10;  author: string&#10;  closed_at: string&#10;  repo: string&#10;  ai_usage: AIUsageStats&#10;  copilot_review: {&#10;    login: string&#10;    type: string&#10;    body: string&#10;    url: string&#10;  }&#10;}&#10;&#10;export interface CopilotUsageResponse {&#10;  pullRequestsReviewedByCopilot: {&#10;    pulls: PullRequestData[]&#10;    total: number&#10;  }&#10;  stats: AIUsageStats&#10;}&#10;&#10;/**&#10; * Fetch Copilot usage statistics from the backend&#10; * @param daysRange - Number of days to look back for PR analysis&#10; * @returns Promise with copilot usage data&#10; */&#10;export const getCopilotUsageStats = async (daysRange: number = 7): Promise&lt;CopilotUsageResponse&gt; =&gt; {&#10;  try {&#10;    const response = await api.get&lt;CopilotUsageResponse&gt;('/github/copilot/usage', {&#10;      params: { daysRange }&#10;    })&#10;&#10;    return response.data&#10;  } catch (error) {&#10;    if (axios.isAxiosError(error)) {&#10;      throw new Error(`Failed to fetch copilot stats: ${error.response?.data?.message || error.message}`)&#10;    }&#10;    throw new Error('An unexpected error occurred while fetching copilot stats')&#10;  }&#10;}&#10;&#10;/**&#10; * Test endpoint to verify backend connection&#10; * @returns Promise with current GitHub user data&#10; */&#10;export const getCurrentUser = async () =&gt; {&#10;  try {&#10;    const response = await api.get('/github/user')&#10;    return response.data&#10;  } catch (error) {&#10;    if (axios.isAxiosError(error)) {&#10;      throw new Error(`Failed to fetch user: ${error.response?.data?.message || error.message}`)&#10;    }&#10;    throw new Error('An unexpected error occurred while fetching user data')&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/apps/frontend/tsconfig.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/apps/frontend/tsconfig.json" />
              <option name="originalContent" value="{&#10;  &quot;compilerOptions&quot;: {&#10;    &quot;target&quot;: &quot;ES2020&quot;,&#10;    &quot;useDefineForClassFields&quot;: true,&#10;    &quot;lib&quot;: [&quot;ES2020&quot;, &quot;DOM&quot;, &quot;DOM.Iterable&quot;],&#10;    &quot;module&quot;: &quot;ESNext&quot;,&#10;    &quot;skipLibCheck&quot;: true,&#10;&#10;    /* Bundler mode */&#10;    &quot;moduleResolution&quot;: &quot;bundler&quot;,&#10;    &quot;allowImportingTsExtensions&quot;: true,&#10;    &quot;resolveJsonModule&quot;: true,&#10;    &quot;isolatedModules&quot;: true,&#10;    &quot;noEmit&quot;: true,&#10;    &quot;jsx&quot;: &quot;react&quot;,&#10;&#10;    /* Linting */&#10;    &quot;strict&quot;: true,&#10;    &quot;noUnusedLocals&quot;: true,&#10;    &quot;noUnusedParameters&quot;: true,&#10;    &quot;noFallthroughCasesInSwitch&quot;: true&#10;  },&#10;  &quot;include&quot;: [&quot;src&quot;],&#10;  &quot;references&quot;: [{ &quot;path&quot;: &quot;./tsconfig.node.json&quot; }]&#10;}&#10;" />
              <option name="updatedContent" value="{&#10;  &quot;compilerOptions&quot;: {&#10;    &quot;target&quot;: &quot;ES2020&quot;,&#10;    &quot;useDefineForClassFields&quot;: true,&#10;    &quot;lib&quot;: [&quot;ES2020&quot;, &quot;DOM&quot;, &quot;DOM.Iterable&quot;],&#10;    &quot;module&quot;: &quot;ESNext&quot;,&#10;    &quot;skipLibCheck&quot;: true,&#10;    &quot;types&quot;: [&quot;vite/client&quot;],&#10;&#10;    /* Bundler mode */&#10;    &quot;moduleResolution&quot;: &quot;bundler&quot;,&#10;    &quot;allowImportingTsExtensions&quot;: true,&#10;    &quot;resolveJsonModule&quot;: true,&#10;    &quot;isolatedModules&quot;: true,&#10;    &quot;noEmit&quot;: true,&#10;    &quot;jsx&quot;: &quot;react-jsx&quot;,&#10;&#10;    /* Linting */&#10;    &quot;strict&quot;: true,&#10;    &quot;noUnusedLocals&quot;: true,&#10;    &quot;noUnusedParameters&quot;: true,&#10;    &quot;noFallthroughCasesInSwitch&quot;: true&#10;  },&#10;  &quot;include&quot;: [&quot;src&quot;],&#10;  &quot;references&quot;: [{ &quot;path&quot;: &quot;./tsconfig.node.json&quot; }]&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/apps/frontend/tsconfig.node.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/apps/frontend/tsconfig.node.json" />
              <option name="updatedContent" value="{&#10;  &quot;compilerOptions&quot;: {&#10;    &quot;composite&quot;: true,&#10;    &quot;skipLibCheck&quot;: true,&#10;    &quot;module&quot;: &quot;ESNext&quot;,&#10;    &quot;moduleResolution&quot;: &quot;bundler&quot;,&#10;    &quot;allowSyntheticDefaultImports&quot;: true&#10;  },&#10;  &quot;include&quot;: [&quot;vite.config.ts&quot;]&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>