<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/apps/backend/package.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/apps/backend/package.json" />
              <option name="originalContent" value="{&#10;  &quot;name&quot;: &quot;backend&quot;,&#10;  &quot;version&quot;: &quot;0.0.1&quot;,&#10;  &quot;description&quot;: &quot;&quot;,&#10;  &quot;author&quot;: &quot;&quot;,&#10;  &quot;private&quot;: true,&#10;  &quot;license&quot;: &quot;UNLICENSED&quot;,&#10;  &quot;scripts&quot;: {&#10;    &quot;build&quot;: &quot;nest build&quot;,&#10;    &quot;format&quot;: &quot;prettier --write \&quot;src/**/*.ts\&quot; \&quot;test/**/*.ts\&quot;&quot;,&#10;    &quot;start&quot;: &quot;nest start&quot;,&#10;    &quot;start:dev&quot;: &quot;nest start --watch&quot;,&#10;    &quot;start:debug&quot;: &quot;nest start --debug --watch&quot;,&#10;    &quot;start:prod&quot;: &quot;node dist/main&quot;,&#10;    &quot;lint&quot;: &quot;eslint \&quot;{src,apps,libs,test}/**/*.ts\&quot; --fix&quot;,&#10;    &quot;test&quot;: &quot;vitest run&quot;,&#10;    &quot;test:watch&quot;: &quot;vitest&quot;,&#10;    &quot;test:ui&quot;: &quot;vitest --ui&quot;,&#10;    &quot;test:coverage&quot;: &quot;vitest run --coverage&quot;,&#10;    &quot;test:unit&quot;: &quot;vitest run --config vitest.config.ts src/&quot;,&#10;    &quot;test:integration&quot;: &quot;vitest run --config vitest.config.ts test/&quot;,&#10;    &quot;db:generate&quot;: &quot;drizzle-kit generate&quot;,&#10;    &quot;db:migrate&quot;: &quot;drizzle-kit migrate&quot;,&#10;    &quot;db:studio&quot;: &quot;drizzle-kit studio&quot;,&#10;    &quot;db:push&quot;: &quot;drizzle-kit push&quot;&#10;  },&#10;  &quot;dependencies&quot;: {&#10;    &quot;@nestjs/common&quot;: &quot;^11.1.5&quot;,&#10;    &quot;@nestjs/config&quot;: &quot;^3.3.0&quot;,&#10;    &quot;@nestjs/core&quot;: &quot;^11.1.5&quot;,&#10;    &quot;@nestjs/platform-express&quot;: &quot;^11.1.5&quot;,&#10;    &quot;@nestjs/schedule&quot;: &quot;^4.1.2&quot;,&#10;    &quot;@octokit/auth-app&quot;: &quot;^6.1.4&quot;,&#10;    &quot;@octokit/rest&quot;: &quot;^20.1.2&quot;,&#10;    &quot;class-transformer&quot;: &quot;^0.5.1&quot;,&#10;    &quot;class-validator&quot;: &quot;^0.14.2&quot;,&#10;    &quot;drizzle-orm&quot;: &quot;^0.36.4&quot;,&#10;    &quot;pg&quot;: &quot;^8.16.3&quot;,&#10;    &quot;reflect-metadata&quot;: &quot;^0.2.2&quot;,&#10;    &quot;rxjs&quot;: &quot;^7.8.2&quot;&#10;  },&#10;  &quot;devDependencies&quot;: {&#10;    &quot;@eslint/eslintrc&quot;: &quot;^3.3.1&quot;,&#10;    &quot;@eslint/js&quot;: &quot;^9.32.0&quot;,&#10;    &quot;@nestjs/cli&quot;: &quot;^11.0.7&quot;,&#10;    &quot;@nestjs/schematics&quot;: &quot;^11.0.5&quot;,&#10;    &quot;@nestjs/testing&quot;: &quot;^11.1.5&quot;,&#10;    &quot;@swc/cli&quot;: &quot;^0.6.0&quot;,&#10;    &quot;@swc/core&quot;: &quot;^1.13.2&quot;,&#10;    &quot;@types/express&quot;: &quot;^5.0.3&quot;,&#10;    &quot;@types/node&quot;: &quot;^22.16.5&quot;,&#10;    &quot;@types/pg&quot;: &quot;^8.15.4&quot;,&#10;    &quot;@types/supertest&quot;: &quot;^6.0.3&quot;,&#10;    &quot;@vitest/coverage-v8&quot;: &quot;^3.2.4&quot;,&#10;    &quot;@vitest/ui&quot;: &quot;^3.2.4&quot;,&#10;    &quot;drizzle-kit&quot;: &quot;^0.28.1&quot;,&#10;    &quot;eslint&quot;: &quot;^9.32.0&quot;,&#10;    &quot;eslint-config-prettier&quot;: &quot;^10.1.8&quot;,&#10;    &quot;eslint-plugin-prettier&quot;: &quot;^5.5.3&quot;,&#10;    &quot;globals&quot;: &quot;^16.3.0&quot;,&#10;    &quot;msw&quot;: &quot;^2.10.4&quot;,&#10;    &quot;prettier&quot;: &quot;^3.6.2&quot;,&#10;    &quot;source-map-support&quot;: &quot;^0.5.21&quot;,&#10;    &quot;supertest&quot;: &quot;^7.1.4&quot;,&#10;    &quot;ts-loader&quot;: &quot;^9.5.2&quot;,&#10;    &quot;ts-node&quot;: &quot;^10.9.2&quot;,&#10;    &quot;tsconfig-paths&quot;: &quot;^4.2.0&quot;,&#10;    &quot;typescript&quot;: &quot;^5.8.3&quot;,&#10;    &quot;typescript-eslint&quot;: &quot;^8.38.0&quot;,&#10;    &quot;vitest&quot;: &quot;^2.1.9&quot;,&#10;    &quot;vitest-mock-extended&quot;: &quot;^2.0.2&quot;&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="{&#10;  &quot;name&quot;: &quot;@copilot-stats/backend&quot;,&#10;  &quot;version&quot;: &quot;0.0.1&quot;,&#10;  &quot;description&quot;: &quot;NestJS backend for GitHub Copilot statistics&quot;,&#10;  &quot;author&quot;: &quot;&quot;,&#10;  &quot;private&quot;: true,&#10;  &quot;license&quot;: &quot;UNLICENSED&quot;,&#10;  &quot;scripts&quot;: {&#10;    &quot;build&quot;: &quot;nest build&quot;,&#10;    &quot;format&quot;: &quot;prettier --write \&quot;src/**/*.ts\&quot; \&quot;test/**/*.ts\&quot;&quot;,&#10;    &quot;start&quot;: &quot;nest start&quot;,&#10;    &quot;start:dev&quot;: &quot;nest start --watch&quot;,&#10;    &quot;start:debug&quot;: &quot;nest start --debug --watch&quot;,&#10;    &quot;start:prod&quot;: &quot;node dist/main&quot;,&#10;    &quot;lint&quot;: &quot;eslint \&quot;{src,apps,libs,test}/**/*.ts\&quot; --fix&quot;,&#10;    &quot;test&quot;: &quot;vitest&quot;,&#10;    &quot;test:watch&quot;: &quot;vitest --watch&quot;,&#10;    &quot;test:cov&quot;: &quot;vitest --coverage&quot;,&#10;    &quot;test:debug&quot;: &quot;vitest --inspect-brk --pool=forks --poolOptions.forks.singleFork=true&quot;,&#10;    &quot;test:e2e&quot;: &quot;vitest --config ./vitest.config.e2e.ts&quot;&#10;  },&#10;  &quot;dependencies&quot;: {&#10;    &quot;@nestjs/common&quot;: &quot;^10.0.0&quot;,&#10;    &quot;@nestjs/core&quot;: &quot;^10.0.0&quot;,&#10;    &quot;@nestjs/config&quot;: &quot;^3.0.0&quot;,&#10;    &quot;@nestjs/platform-express&quot;: &quot;^10.0.0&quot;,&#10;    &quot;@nestjs/schedule&quot;: &quot;^4.0.0&quot;,&#10;    &quot;reflect-metadata&quot;: &quot;^0.2.0&quot;,&#10;    &quot;rxjs&quot;: &quot;^7.8.1&quot;,&#10;    &quot;axios&quot;: &quot;^1.6.0&quot;,&#10;    &quot;pg&quot;: &quot;^8.11.0&quot;,&#10;    &quot;drizzle-orm&quot;: &quot;^0.29.0&quot;&#10;  },&#10;  &quot;devDependencies&quot;: {&#10;    &quot;@nestjs/cli&quot;: &quot;^10.0.0&quot;,&#10;    &quot;@nestjs/schematics&quot;: &quot;^10.0.0&quot;,&#10;    &quot;@nestjs/testing&quot;: &quot;^10.0.0&quot;,&#10;    &quot;@types/express&quot;: &quot;^4.17.17&quot;,&#10;    &quot;@types/node&quot;: &quot;^20.3.1&quot;,&#10;    &quot;@types/pg&quot;: &quot;^8.10.0&quot;,&#10;    &quot;@typescript-eslint/eslint-plugin&quot;: &quot;^7.0.0&quot;,&#10;    &quot;@typescript-eslint/parser&quot;: &quot;^7.0.0&quot;,&#10;    &quot;drizzle-kit&quot;: &quot;^0.20.0&quot;,&#10;    &quot;eslint&quot;: &quot;^8.42.0&quot;,&#10;    &quot;eslint-config-prettier&quot;: &quot;^9.0.0&quot;,&#10;    &quot;eslint-plugin-prettier&quot;: &quot;^5.0.0&quot;,&#10;    &quot;msw&quot;: &quot;^2.0.0&quot;,&#10;    &quot;prettier&quot;: &quot;^3.0.0&quot;,&#10;    &quot;source-map-support&quot;: &quot;^0.5.21&quot;,&#10;    &quot;supertest&quot;: &quot;^6.3.3&quot;,&#10;    &quot;@types/supertest&quot;: &quot;^6.0.0&quot;,&#10;    &quot;ts-loader&quot;: &quot;^9.4.3&quot;,&#10;    &quot;ts-node&quot;: &quot;^10.9.1&quot;,&#10;    &quot;tsconfig-paths&quot;: &quot;^4.2.1&quot;,&#10;    &quot;typescript&quot;: &quot;^5.1.3&quot;,&#10;    &quot;vitest&quot;: &quot;^1.0.0&quot;,&#10;    &quot;@vitest/coverage-v8&quot;: &quot;^1.0.0&quot;,&#10;    &quot;vitest-mock-extended&quot;: &quot;^1.3.0&quot;&#10;  },&#10;  &quot;vitest&quot;: {&#10;    &quot;testMatch&quot;: [&#10;      &quot;**/*.spec.ts&quot;&#10;    ],&#10;    &quot;setupFiles&quot;: [&#10;      &quot;./test/setup.ts&quot;&#10;    ]&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/apps/backend/src/github/github.controller.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/apps/backend/src/github/github.controller.ts" />
              <option name="originalContent" value="import { Controller, Get, Logger, Param, Query } from '@nestjs/common';&#10;import { GitHubService } from './github.service';&#10;&#10;@Controller('github')&#10;export class GitHubController {&#10;  private readonly logger = new Logger(GitHubController.name);&#10;&#10;  constructor(private readonly githubService: GitHubService) {}&#10;&#10;  /**&#10;   * Test endpoint to verify GitHub API connection&#10;   * GET /github/user&#10;   */&#10;  @Get('user')&#10;  async getCurrentUser() {&#10;    this.logger.log('Testing GitHub API connection...');&#10;    return await this.githubService.getCurrentUser();&#10;  }&#10;&#10;  /**&#10;   * Fetch Copilot usage metrics for the organization&#10;   * GET /github/copilot/usage?since=2024-12-01&amp;until=2025-01-01&#10;   */&#10;  @Get('copilot/usage')&#10;  async getCopilotUsage(&#10;    @Query('since') since?: string,&#10;    @Query('until') until?: string,&#10;  ) {&#10;    this.logger.log(&#10;      `Fetching Copilot usage metrics. Since: ${since}, Until: ${until}`,&#10;    );&#10;    return await this.githubService.getCopilotUsageMetrics(since, until);&#10;  }&#10;&#10;  /**&#10;   * Fetch Copilot seat information&#10;   * GET /github/copilot/seats&#10;   */&#10;  @Get('copilot/seats')&#10;  async getCopilotSeats() {&#10;    this.logger.log('Fetching Copilot seat information...');&#10;    return await this.githubService.getCopilotSeats();&#10;  }&#10;&#10;  /**&#10;   * Fetch pull requests for a repository&#10;   * GET /github/repos/my-repo/pulls?since=2024-12-01&#10;   */&#10;  @Get('repos/:repo/pulls')&#10;  async getRepoPullRequests(&#10;    @Param('repo') repo: string,&#10;    @Query('since') since?: string,&#10;  ) {&#10;    this.logger.log(`Fetching pull requests for repository: ${repo}`);&#10;    return await this.githubService.getPullRequestsForRepo(repo, since);&#10;  }&#10;&#10;  /**&#10;   * Fetch reviews for a specific pull request&#10;   * GET /github/repos/my-repo/pulls/123/reviews&#10;   */&#10;  @Get('repos/:repo/pulls/:pullNumber/reviews')&#10;  async getPullRequestReviews(&#10;    @Param('repo') repo: string,&#10;    @Param('pullNumber') pullNumber: string,&#10;  ) {&#10;    const prNumber = parseInt(pullNumber, 10);&#10;    this.logger.log(`Fetching reviews for PR #${prNumber} in ${repo}`);&#10;    return await this.githubService.getPullRequestReviews(repo, prNumber);&#10;  }&#10;&#10;  /**&#10;   * Get a summary of Copilot metrics for the last 28 days (API limit)&#10;   * GET /github/copilot/summary&#10;   */&#10;  @Get('copilot/summary')&#10;  async getCopilotSummary() {&#10;    this.logger.log('Generating Copilot summary for last 28 days...');&#10;&#10;    // Calculate 28 days ago (GitHub API limit)&#10;    const today = new Date();&#10;    const twentyEightDaysAgo = new Date(&#10;      today.getTime() - 28 * 24 * 60 * 60 * 1000,&#10;    );&#10;    const since = twentyEightDaysAgo.toISOString().split('T')[0]; // YYYY-MM-DD format&#10;&#10;    try {&#10;      // Fetch both usage metrics and seat information&#10;      const [usageMetrics, seatInfo] = await Promise.all([&#10;        this.githubService.getCopilotUsageMetrics(since),&#10;        this.githubService.getCopilotSeats(),&#10;      ]);&#10;&#10;      return {&#10;        period: {&#10;          since,&#10;          until: today.toISOString().split('T')[0],&#10;          days: 28,&#10;        },&#10;        usage_metrics: usageMetrics,&#10;        seat_info: seatInfo,&#10;        summary: {&#10;          total_seats: seatInfo.total_seats,&#10;          total_active_users: usageMetrics.length,&#10;          total_usage_records: usageMetrics.length,&#10;        },&#10;      };&#10;    } catch (error) {&#10;      this.logger.error('Failed to generate Copilot summary:', error.message);&#10;      throw error;&#10;    }&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import { Controller, Get, Param, Query } from '@nestjs/common';&#10;import { GitHubService } from './github.service';&#10;import type {&#10;  GitHubUser,&#10;  CopilotUsageMetrics,&#10;  CopilotSeats,&#10;  PullRequest,&#10;  PullRequestReview,&#10;  CopilotSummary,&#10;} from '../../test/setup';&#10;&#10;@Controller('github')&#10;export class GitHubController {&#10;  constructor(private readonly githubService: GitHubService) {}&#10;&#10;  /**&#10;   * Test endpoint to verify GitHub API connection&#10;   * GET /github/user&#10;   */&#10;  @Get('user')&#10;  async getCurrentUser(): Promise&lt;GitHubUser&gt; {&#10;    return this.githubService.getCurrentUser();&#10;  }&#10;&#10;  /**&#10;   * Fetch Copilot usage metrics for the organization&#10;   * GET /github/copilot/usage?since=2024-12-01&amp;until=2025-01-01&#10;   */&#10;  @Get('copilot/usage')&#10;  async getCopilotUsage(&#10;    @Query('since') since?: string,&#10;    @Query('until') until?: string,&#10;  ): Promise&lt;CopilotUsageMetrics[]&gt; {&#10;    return this.githubService.getCopilotUsage(since, until);&#10;  }&#10;&#10;  /**&#10;   * Fetch Copilot seat information&#10;   * GET /github/copilot/seats&#10;   */&#10;  @Get('copilot/seats')&#10;  async getCopilotSeats(): Promise&lt;CopilotSeats&gt; {&#10;    return this.githubService.getCopilotSeats();&#10;  }&#10;&#10;  /**&#10;   * Fetch pull requests for a repository&#10;   * GET /github/repos/my-repo/pulls?since=2024-12-01&#10;   */&#10;  @Get('repos/:repo/pulls')&#10;  async getPullRequests(&#10;    @Param('repo') repo: string,&#10;    @Query('since') since?: string,&#10;  ): Promise&lt;PullRequest[]&gt; {&#10;    return this.githubService.getPullRequests(repo, since);&#10;  }&#10;&#10;  /**&#10;   * Fetch reviews for a specific pull request&#10;   * GET /github/repos/my-repo/pulls/123/reviews&#10;   */&#10;  @Get('repos/:repo/pulls/:pullNumber/reviews')&#10;  async getPullRequestReviews(&#10;    @Param('repo') repo: string,&#10;    @Param('pullNumber') pullNumber: number,&#10;  ): Promise&lt;PullRequestReview[]&gt; {&#10;    return this.githubService.getPullRequestReviews(repo, pullNumber);&#10;  }&#10;&#10;  /**&#10;   * Get a summary of Copilot metrics for the last 28 days (API limit)&#10;   * GET /github/copilot/summary&#10;   */&#10;  @Get('copilot/summary')&#10;  async getCopilotSummary(): Promise&lt;CopilotSummary&gt; {&#10;    return this.githubService.getCopilotSummary();&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/apps/backend/test/github/github.controller.integration.spec.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/apps/backend/test/github/github.controller.integration.spec.ts" />
              <option name="originalContent" value="import { Test, TestingModule } from '@nestjs/testing';&#10;import { INestApplication } from '@nestjs/common';&#10;import { ConfigModule, ConfigService } from '@nestjs/config';&#10;import { afterEach, beforeEach, describe, expect, it, vi } from 'vitest';&#10;import request from 'supertest';&#10;import { GitHubController } from '../../src/github/github.controller';&#10;import { GitHubService } from '../../src/github/github.service';&#10;import {&#10;  mockCopilotSeats,&#10;  mockCopilotUsageMetrics,&#10;  mockCurrentUser,&#10;  mockPullRequestReviews,&#10;  mockPullRequests,&#10;} from '../setup';&#10;&#10;describe('GitHubController (Integration)', () =&gt; {&#10;  let app: INestApplication;&#10;  let githubController: GitHubController;&#10;&#10;  beforeEach(async () =&gt; {&#10;    const moduleFixture: TestingModule = await Test.createTestingModule({&#10;      imports: [&#10;        ConfigModule.forRoot({&#10;          isGlobal: true,&#10;          envFilePath: '.env.test',&#10;        }),&#10;      ],&#10;      controllers: [GitHubController],&#10;      providers: [&#10;        GitHubService,&#10;        {&#10;          provide: ConfigService,&#10;          useValue: {&#10;            get: vi.fn((key: string) =&gt; {&#10;              const config = {&#10;                GITHUB_TOKEN: 'test-token',&#10;                GITHUB_ORG: 'test-org',&#10;              };&#10;              return config[key];&#10;            }),&#10;          },&#10;        },&#10;      ],&#10;    }).compile();&#10;&#10;    app = moduleFixture.createNestApplication();&#10;    githubController = moduleFixture.get&lt;GitHubController&gt;(GitHubController);&#10;    await app.init();&#10;  });&#10;&#10;  afterEach(async () =&gt; {&#10;    await app.close();&#10;  });&#10;&#10;  describe('GET /github/user', () =&gt; {&#10;    it('should return current authenticated user information', async () =&gt; {&#10;      const response = await request(app.getHttpServer())&#10;        .get('/github/user')&#10;        .expect(200);&#10;&#10;      expect(response.body).toEqual(mockCurrentUser);&#10;      expect(response.body.login).toBe('advait-incubyte');&#10;      expect(response.body.company).toBe('@incubyte');&#10;    });&#10;&#10;    it('should handle authentication errors gracefully', async () =&gt; {&#10;      // This test would require modifying the MSW handler to return 401&#10;      // We'll implement this in the service unit tests&#10;    });&#10;  });&#10;&#10;  describe('GET /github/copilot/usage', () =&gt; {&#10;    it('should return Copilot usage metrics for the organization', async () =&gt; {&#10;      const response = await request(app.getHttpServer())&#10;        .get('/github/copilot/usage')&#10;        .expect(200);&#10;&#10;      expect(response.body).toEqual(mockCopilotUsageMetrics);&#10;      expect(Array.isArray(response.body)).toBe(true);&#10;      expect(response.body[0]).toHaveProperty('day');&#10;      expect(response.body[0]).toHaveProperty('total_suggestions_count');&#10;      expect(response.body[0]).toHaveProperty('total_acceptances_count');&#10;      expect(response.body[0]).toHaveProperty('breakdown');&#10;    });&#10;&#10;    it('should accept since and until query parameters', async () =&gt; {&#10;      const since = '2025-01-01';&#10;      const until = '2025-01-31';&#10;&#10;      const response = await request(app.getHttpServer())&#10;        .get(`/github/copilot/usage?since=${since}&amp;until=${until}`)&#10;        .expect(200);&#10;&#10;      expect(response.body).toEqual(mockCopilotUsageMetrics);&#10;      // In a real implementation, we'd verify the query params were passed to the API&#10;    });&#10;&#10;    it('should return meaningful data structure for frontend consumption', async () =&gt; {&#10;      const response = await request(app.getHttpServer())&#10;        .get('/github/copilot/usage')&#10;        .expect(200);&#10;&#10;      const usageData = response.body[0];&#10;&#10;      // Verify the data contains everything the frontend needs&#10;      expect(usageData.total_active_users).toBe(3); // Your 3 teammates&#10;      expect(usageData.breakdown).toHaveLength(2); // TypeScript and JavaScript&#10;      expect(usageData.breakdown[0]).toHaveProperty('language');&#10;      expect(usageData.breakdown[0]).toHaveProperty('editor');&#10;      expect(usageData.breakdown[0]).toHaveProperty('acceptances_count');&#10;    });&#10;  });&#10;&#10;  describe('GET /github/copilot/seats', () =&gt; {&#10;    it('should return Copilot seat information for team members', async () =&gt; {&#10;      const response = await request(app.getHttpServer())&#10;        .get('/github/copilot/seats')&#10;        .expect(200);&#10;&#10;      expect(response.body).toEqual(mockCopilotSeats);&#10;      expect(response.body.total_seats).toBe(5);&#10;      expect(response.body.seats).toHaveLength(3); // Your 3 teammates&#10;      expect(response.body.seats[0].assignee.login).toBe('teammate1');&#10;    });&#10;&#10;    it('should provide seat data needed for filtering usage metrics', async () =&gt; {&#10;      const response = await request(app.getHttpServer())&#10;        .get('/github/copilot/seats')&#10;        .expect(200);&#10;&#10;      const seats = response.body.seats;&#10;&#10;      // Verify we can identify your specific teammates&#10;      const teammateLogins = seats.map((seat) =&gt; seat.assignee.login);&#10;      expect(teammateLogins).toContain('teammate1');&#10;      expect(teammateLogins).toContain('teammate2');&#10;      expect(teammateLogins).toContain('teammate3');&#10;&#10;      // Verify we have activity information&#10;      seats.forEach((seat) =&gt; {&#10;        expect(seat).toHaveProperty('last_activity_at');&#10;        expect(seat).toHaveProperty('last_activity_editor');&#10;      });&#10;    });&#10;  });&#10;&#10;  describe('GET /github/repos/:repo/pulls', () =&gt; {&#10;    it('should return pull requests for a specific repository', async () =&gt; {&#10;      const repo = 'test-repo';&#10;&#10;      const response = await request(app.getHttpServer())&#10;        .get(`/github/repos/${repo}/pulls`)&#10;        .expect(200);&#10;&#10;      expect(response.body).toEqual(mockPullRequests);&#10;      expect(Array.isArray(response.body)).toBe(true);&#10;      expect(response.body[0]).toHaveProperty('number');&#10;      expect(response.body[0]).toHaveProperty('title');&#10;      expect(response.body[0]).toHaveProperty('user');&#10;    });&#10;&#10;    it('should accept since query parameter for date filtering', async () =&gt; {&#10;      const repo = 'test-repo';&#10;      const since = '2025-01-01';&#10;&#10;      const response = await request(app.getHttpServer())&#10;        .get(`/github/repos/${repo}/pulls?since=${since}`)&#10;        .expect(200);&#10;&#10;      expect(response.body).toEqual(mockPullRequests);&#10;    });&#10;  });&#10;&#10;  describe('GET /github/repos/:repo/pulls/:pullNumber/reviews', () =&gt; {&#10;    it('should return reviews for a specific pull request', async () =&gt; {&#10;      const repo = 'test-repo';&#10;      const pullNumber = 123;&#10;&#10;      const response = await request(app.getHttpServer())&#10;        .get(`/github/repos/${repo}/pulls/${pullNumber}/reviews`)&#10;        .expect(200);&#10;&#10;      expect(response.body).toEqual(mockPullRequestReviews);&#10;      expect(Array.isArray(response.body)).toBe(true);&#10;    });&#10;&#10;    it('should include both human and bot reviews for Copilot detection', async () =&gt; {&#10;      const repo = 'test-repo';&#10;      const pullNumber = 123;&#10;&#10;      const response = await request(app.getHttpServer())&#10;        .get(`/github/repos/${repo}/pulls/${pullNumber}/reviews`)&#10;        .expect(200);&#10;&#10;      const reviews = response.body;&#10;&#10;      // Should have both bot and human reviews&#10;      const botReview = reviews.find((review) =&gt; review.user.type === 'Bot');&#10;      const humanReview = reviews.find((review) =&gt; review.user.type === 'User');&#10;&#10;      expect(botReview).toBeDefined();&#10;      expect(humanReview).toBeDefined();&#10;      expect(botReview.user.login).toBe('github-actions[bot]');&#10;    });&#10;  });&#10;&#10;  describe('GET /github/copilot/summary', () =&gt; {&#10;    it('should return a combined summary of Copilot metrics for last 28 days', async () =&gt; {&#10;      const response = await request(app.getHttpServer())&#10;        .get('/github/copilot/summary')&#10;        .expect(200);&#10;&#10;      expect(response.body).toHaveProperty('period');&#10;      expect(response.body).toHaveProperty('usage_metrics');&#10;      expect(response.body).toHaveProperty('seat_info');&#10;      expect(response.body).toHaveProperty('summary');&#10;&#10;      // Verify period calculation&#10;      expect(response.body.period.days).toBe(28);&#10;      expect(response.body.period.since).toBeDefined();&#10;      expect(response.body.period.until).toBeDefined();&#10;&#10;      // Verify summary statistics&#10;      expect(response.body.summary.total_seats).toBe(5);&#10;      expect(response.body.summary.total_active_users).toBe(1); // Length of mock usage metrics array&#10;    });&#10;&#10;    it('should provide data structure suitable for dashboard display', async () =&gt; {&#10;      const response = await request(app.getHttpServer())&#10;        .get('/github/copilot/summary')&#10;        .expect(200);&#10;&#10;      const summary = response.body;&#10;&#10;      // Frontend should be able to easily extract key metrics&#10;      expect(typeof summary.summary.total_seats).toBe('number');&#10;      expect(typeof summary.summary.total_active_users).toBe('number');&#10;      expect(Array.isArray(summary.usage_metrics)).toBe(true);&#10;      expect(Array.isArray(summary.seat_info.seats)).toBe(true);&#10;    });&#10;  });&#10;});&#10;" />
              <option name="updatedContent" value="import { Test, TestingModule } from '@nestjs/testing';&#10;import { INestApplication } from '@nestjs/common';&#10;import { ConfigModule, ConfigService } from '@nestjs/config';&#10;import { afterEach, beforeEach, describe, expect, it, vi } from 'vitest';&#10;import request from 'supertest';&#10;import { GitHubController } from '../../src/github/github.controller';&#10;import { GitHubService } from '../../src/github/github.service';&#10;import {&#10;  mockCopilotSeats,&#10;  mockCopilotUsageMetrics,&#10;  mockCurrentUser,&#10;  mockPullRequestReviews,&#10;  mockPullRequests,&#10;  type GitHubUser,&#10;  type CopilotUsageMetrics,&#10;  type CopilotSeats,&#10;  type PullRequest,&#10;  type PullRequestReview,&#10;  type CopilotSummary,&#10;} from '../setup';&#10;&#10;describe('GitHubController (Integration)', () =&gt; {&#10;  let app: INestApplication;&#10;&#10;  beforeEach(async () =&gt; {&#10;    const moduleFixture: TestingModule = await Test.createTestingModule({&#10;      imports: [&#10;        ConfigModule.forRoot({&#10;          isGlobal: true,&#10;          envFilePath: '.env.test',&#10;        }),&#10;      ],&#10;      controllers: [GitHubController],&#10;      providers: [&#10;        GitHubService,&#10;        {&#10;          provide: ConfigService,&#10;          useValue: {&#10;            get: vi.fn((key: string): string =&gt; {&#10;              const config: Record&lt;string, string&gt; = {&#10;                GITHUB_TOKEN: 'test-token',&#10;                GITHUB_ORG: 'test-org',&#10;              };&#10;              return config[key] ?? '';&#10;            }),&#10;          },&#10;        },&#10;      ],&#10;    }).compile();&#10;&#10;    app = moduleFixture.createNestApplication();&#10;    await app.init();&#10;  });&#10;&#10;  afterEach(async () =&gt; {&#10;    await app.close();&#10;  });&#10;&#10;  describe('GET /github/user', () =&gt; {&#10;    it('should return current authenticated user information', async () =&gt; {&#10;      const response = await request(app.getHttpServer())&#10;        .get('/github/user')&#10;        .expect(200);&#10;&#10;      const user = response.body as GitHubUser;&#10;      expect(user).toEqual(mockCurrentUser);&#10;      expect(user.login).toBe('advait-incubyte');&#10;      expect(user.company).toBe('@incubyte');&#10;    });&#10;&#10;    it('should handle authentication errors gracefully', async () =&gt; {&#10;      // This test would require modifying the MSW handler to return 401&#10;      // We'll implement this in the service unit tests&#10;    });&#10;  });&#10;&#10;  describe('GET /github/copilot/usage', () =&gt; {&#10;    it('should return Copilot usage metrics for the organization', async () =&gt; {&#10;      const response = await request(app.getHttpServer())&#10;        .get('/github/copilot/usage')&#10;        .expect(200);&#10;&#10;      const usageMetrics = response.body as CopilotUsageMetrics[];&#10;      expect(usageMetrics).toEqual(mockCopilotUsageMetrics);&#10;      expect(Array.isArray(usageMetrics)).toBe(true);&#10;      expect(usageMetrics[0]).toHaveProperty('day');&#10;      expect(usageMetrics[0]).toHaveProperty('total_suggestions_count');&#10;      expect(usageMetrics[0]).toHaveProperty('total_acceptances_count');&#10;      expect(usageMetrics[0]).toHaveProperty('breakdown');&#10;    });&#10;&#10;    it('should accept since and until query parameters', async () =&gt; {&#10;      const since = '2025-01-01';&#10;      const until = '2025-01-31';&#10;&#10;      const response = await request(app.getHttpServer())&#10;        .get(`/github/copilot/usage?since=${since}&amp;until=${until}`)&#10;        .expect(200);&#10;&#10;      const usageMetrics = response.body as CopilotUsageMetrics[];&#10;      expect(usageMetrics).toEqual(mockCopilotUsageMetrics);&#10;      // In a real implementation, we'd verify the query params were passed to the API&#10;    });&#10;&#10;    it('should return meaningful data structure for frontend consumption', async () =&gt; {&#10;      const response = await request(app.getHttpServer())&#10;        .get('/github/copilot/usage')&#10;        .expect(200);&#10;&#10;      const usageMetrics = response.body as CopilotUsageMetrics[];&#10;      const usageData = usageMetrics[0];&#10;&#10;      // Verify the data contains everything the frontend needs&#10;      expect(usageData.total_active_users).toBe(3); // Your 3 teammates&#10;      expect(usageData.breakdown).toHaveLength(2); // TypeScript and JavaScript&#10;      expect(usageData.breakdown[0]).toHaveProperty('language');&#10;      expect(usageData.breakdown[0]).toHaveProperty('editor');&#10;      expect(usageData.breakdown[0]).toHaveProperty('acceptances_count');&#10;    });&#10;  });&#10;&#10;  describe('GET /github/copilot/seats', () =&gt; {&#10;    it('should return Copilot seat information for team members', async () =&gt; {&#10;      const response = await request(app.getHttpServer())&#10;        .get('/github/copilot/seats')&#10;        .expect(200);&#10;&#10;      const seats = response.body as CopilotSeats;&#10;      expect(seats).toEqual(mockCopilotSeats);&#10;      expect(seats.total_seats).toBe(5);&#10;      expect(seats.seats).toHaveLength(3); // Your 3 teammates&#10;      expect(seats.seats[0].assignee.login).toBe('teammate1');&#10;    });&#10;&#10;    it('should provide seat data needed for filtering usage metrics', async () =&gt; {&#10;      const response = await request(app.getHttpServer())&#10;        .get('/github/copilot/seats')&#10;        .expect(200);&#10;&#10;      const seatsData = response.body as CopilotSeats;&#10;      const { seats } = seatsData;&#10;&#10;      // Verify we can identify your specific teammates&#10;      const teammateLogins = seats.map((seat) =&gt; seat.assignee.login);&#10;      expect(teammateLogins).toContain('teammate1');&#10;      expect(teammateLogins).toContain('teammate2');&#10;      expect(teammateLogins).toContain('teammate3');&#10;&#10;      // Verify we have activity information&#10;      seats.forEach((seat) =&gt; {&#10;        expect(seat).toHaveProperty('last_activity_at');&#10;        expect(seat).toHaveProperty('last_activity_editor');&#10;      });&#10;    });&#10;  });&#10;&#10;  describe('GET /github/repos/:repo/pulls', () =&gt; {&#10;    it('should return pull requests for a specific repository', async () =&gt; {&#10;      const repo = 'test-repo';&#10;&#10;      const response = await request(app.getHttpServer())&#10;        .get(`/github/repos/${repo}/pulls`)&#10;        .expect(200);&#10;&#10;      const pullRequests = response.body as PullRequest[];&#10;      expect(pullRequests).toEqual(mockPullRequests);&#10;      expect(Array.isArray(pullRequests)).toBe(true);&#10;      expect(pullRequests[0]).toHaveProperty('number');&#10;      expect(pullRequests[0]).toHaveProperty('title');&#10;      expect(pullRequests[0]).toHaveProperty('user');&#10;    });&#10;&#10;    it('should accept since query parameter for date filtering', async () =&gt; {&#10;      const repo = 'test-repo';&#10;      const since = '2025-01-01';&#10;&#10;      const response = await request(app.getHttpServer())&#10;        .get(`/github/repos/${repo}/pulls?since=${since}`)&#10;        .expect(200);&#10;&#10;      const pullRequests = response.body as PullRequest[];&#10;      expect(pullRequests).toEqual(mockPullRequests);&#10;    });&#10;  });&#10;&#10;  describe('GET /github/repos/:repo/pulls/:pullNumber/reviews', () =&gt; {&#10;    it('should return reviews for a specific pull request', async () =&gt; {&#10;      const repo = 'test-repo';&#10;      const pullNumber = 123;&#10;&#10;      const response = await request(app.getHttpServer())&#10;        .get(`/github/repos/${repo}/pulls/${pullNumber}/reviews`)&#10;        .expect(200);&#10;&#10;      const reviews = response.body as PullRequestReview[];&#10;      expect(reviews).toEqual(mockPullRequestReviews);&#10;      expect(Array.isArray(reviews)).toBe(true);&#10;    });&#10;&#10;    it('should include both human and bot reviews for Copilot detection', async () =&gt; {&#10;      const repo = 'test-repo';&#10;      const pullNumber = 123;&#10;&#10;      const response = await request(app.getHttpServer())&#10;        .get(`/github/repos/${repo}/pulls/${pullNumber}/reviews`)&#10;        .expect(200);&#10;&#10;      const reviews = response.body as PullRequestReview[];&#10;&#10;      // Should have both bot and human reviews&#10;      const botReview = reviews.find((review) =&gt; review.user.type === 'Bot');&#10;      const humanReview = reviews.find((review) =&gt; review.user.type === 'User');&#10;&#10;      expect(botReview).toBeDefined();&#10;      expect(humanReview).toBeDefined();&#10;      expect(botReview?.user.login).toBe('github-actions[bot]');&#10;    });&#10;  });&#10;&#10;  describe('GET /github/copilot/summary', () =&gt; {&#10;    it('should return a combined summary of Copilot metrics for last 28 days', async () =&gt; {&#10;      const response = await request(app.getHttpServer())&#10;        .get('/github/copilot/summary')&#10;        .expect(200);&#10;&#10;      const summary = response.body as CopilotSummary;&#10;      expect(summary).toHaveProperty('period');&#10;      expect(summary).toHaveProperty('usage_metrics');&#10;      expect(summary).toHaveProperty('seat_info');&#10;      expect(summary).toHaveProperty('summary');&#10;&#10;      // Verify period calculation&#10;      expect(summary.period.days).toBe(28);&#10;      expect(summary.period.since).toBeDefined();&#10;      expect(summary.period.until).toBeDefined();&#10;&#10;      // Verify summary statistics&#10;      expect(summary.summary.total_seats).toBe(5);&#10;      expect(summary.summary.total_active_users).toBe(1); // Length of mock usage metrics array&#10;    });&#10;&#10;    it('should provide data structure suitable for dashboard display', async () =&gt; {&#10;      const response = await request(app.getHttpServer())&#10;        .get('/github/copilot/summary')&#10;        .expect(200);&#10;&#10;      const summary = response.body as CopilotSummary;&#10;&#10;      // Frontend should be able to easily extract key metrics&#10;      expect(typeof summary.summary.total_seats).toBe('number');&#10;      expect(typeof summary.summary.total_active_users).toBe('number');&#10;      expect(Array.isArray(summary.usage_metrics)).toBe(true);&#10;      expect(Array.isArray(summary.seat_info.seats)).toBe(true);&#10;    });&#10;  });&#10;});&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/apps/backend/test/setup.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/apps/backend/test/setup.ts" />
              <option name="originalContent" value="import { afterAll, afterEach, beforeAll } from 'vitest';&#10;import { setupServer } from 'msw/node';&#10;import { http, HttpResponse } from 'msw';&#10;&#10;// Mock GitHub API responses - based on actual GitHub Copilot Metrics API structure&#10;export const mockCopilotUsageMetrics = [&#10;  {&#10;    day: '2025-01-01',&#10;    total_suggestions_count: 1500,&#10;    total_acceptances_count: 750,&#10;    total_lines_suggested: 12000,&#10;    total_lines_accepted: 6000,&#10;    total_active_users: 3,&#10;    total_chat_acceptances: 25,&#10;    total_chat_turns: 100,&#10;    total_active_chat_users: 2,&#10;    breakdown: [&#10;      {&#10;        language: 'typescript',&#10;        editor: 'vscode',&#10;        suggestions_count: 800,&#10;        acceptances_count: 400,&#10;        lines_suggested: 6400,&#10;        lines_accepted: 3200,&#10;        active_users: 2,&#10;      },&#10;      {&#10;        language: 'javascript',&#10;        editor: 'vscode',&#10;        suggestions_count: 700,&#10;        acceptances_count: 350,&#10;        lines_suggested: 5600,&#10;        lines_accepted: 2800,&#10;        active_users: 1,&#10;      },&#10;    ],&#10;  },&#10;];&#10;&#10;export const mockCopilotSeats = {&#10;  total_seats: 5,&#10;  seats: [&#10;    {&#10;      created_at: '2024-12-01T00:00:00Z',&#10;      updated_at: '2025-01-01T00:00:00Z',&#10;      pending_cancellation_date: null,&#10;      last_activity_at: '2025-01-15T10:30:00Z',&#10;      last_activity_editor: 'vscode',&#10;      assignee: {&#10;        login: 'teammate1',&#10;        id: 12345,&#10;        type: 'User',&#10;      },&#10;    },&#10;    {&#10;      created_at: '2024-12-01T00:00:00Z',&#10;      updated_at: '2025-01-01T00:00:00Z',&#10;      pending_cancellation_date: null,&#10;      last_activity_at: '2025-01-15T11:00:00Z',&#10;      last_activity_editor: 'vscode',&#10;      assignee: {&#10;        login: 'teammate2',&#10;        id: 12346,&#10;        type: 'User',&#10;      },&#10;    },&#10;    {&#10;      created_at: '2024-12-01T00:00:00Z',&#10;      updated_at: '2025-01-01T00:00:00Z',&#10;      pending_cancellation_date: null,&#10;      last_activity_at: '2025-01-15T09:45:00Z',&#10;      last_activity_editor: 'vscode',&#10;      assignee: {&#10;        login: 'teammate3',&#10;        id: 12347,&#10;        type: 'User',&#10;      },&#10;    },&#10;  ],&#10;};&#10;&#10;export const mockCurrentUser = {&#10;  login: 'advait-incubyte',&#10;  id: 215627961,&#10;  type: 'User',&#10;  name: 'Advait Maindalkar',&#10;  company: '@incubyte',&#10;};&#10;&#10;export const mockPullRequests = [&#10;  {&#10;    id: 1,&#10;    number: 123,&#10;    title: 'Add Copilot metrics collection',&#10;    user: { login: 'teammate1' },&#10;    created_at: '2025-01-10T10:00:00Z',&#10;    updated_at: '2025-01-10T12:00:00Z',&#10;    state: 'closed',&#10;    merged_at: '2025-01-10T12:00:00Z',&#10;  },&#10;  {&#10;    id: 2,&#10;    number: 124,&#10;    title: 'Fix authentication bug',&#10;    user: { login: 'teammate2' },&#10;    created_at: '2025-01-11T14:00:00Z',&#10;    updated_at: '2025-01-11T16:00:00Z',&#10;    state: 'open',&#10;    merged_at: null,&#10;  },&#10;];&#10;&#10;export const mockPullRequestReviews = [&#10;  {&#10;    id: 1,&#10;    user: { login: 'github-actions[bot]', type: 'Bot' },&#10;    body: 'Copilot review: This code looks good!',&#10;    state: 'APPROVED',&#10;    submitted_at: '2025-01-10T11:00:00Z',&#10;  },&#10;  {&#10;    id: 2,&#10;    user: { login: 'teammate3', type: 'User' },&#10;    body: 'LGTM!',&#10;    state: 'APPROVED',&#10;    submitted_at: '2025-01-10T11:30:00Z',&#10;  },&#10;];&#10;&#10;// MSW request handlers&#10;export const handlers = [&#10;  // Mock GitHub Copilot usage metrics endpoint&#10;  http.get('https://api.github.com/orgs/:org/copilot/usage', () =&gt; {&#10;    return HttpResponse.json(mockCopilotUsageMetrics);&#10;  }),&#10;&#10;  // Mock GitHub Copilot seats endpoint&#10;  http.get('https://api.github.com/orgs/:org/copilot/billing/seats', () =&gt; {&#10;    return HttpResponse.json(mockCopilotSeats);&#10;  }),&#10;&#10;  // Mock GitHub authenticated user endpoint&#10;  http.get('https://api.github.com/user', () =&gt; {&#10;    return HttpResponse.json(mockCurrentUser);&#10;  }),&#10;&#10;  // Mock GitHub pull requests endpoint&#10;  http.get('https://api.github.com/repos/:owner/:repo/pulls', () =&gt; {&#10;    return HttpResponse.json(mockPullRequests);&#10;  }),&#10;&#10;  // Mock GitHub pull request reviews endpoint&#10;  http.get(&#10;    'https://api.github.com/repos/:owner/:repo/pulls/:pull_number/reviews',&#10;    () =&gt; {&#10;      return HttpResponse.json(mockPullRequestReviews);&#10;    },&#10;  ),&#10;&#10;  // Mock error scenarios&#10;  http.get('https://api.github.com/orgs/invalid-org/copilot/usage', () =&gt; {&#10;    return HttpResponse.json({ message: 'Not Found' }, { status: 404 });&#10;  }),&#10;];&#10;&#10;// Create MSW server&#10;export const server = setupServer(...handlers);&#10;&#10;// Setup MSW&#10;beforeAll(() =&gt; {&#10;  server.listen({ onUnhandledRequest: 'error' });&#10;});&#10;&#10;afterEach(() =&gt; {&#10;  server.resetHandlers();&#10;});&#10;&#10;afterAll(() =&gt; {&#10;  server.close();&#10;});&#10;" />
              <option name="updatedContent" value="import { setupServer } from 'msw/node';&#10;import { http, HttpResponse } from 'msw';&#10;import { beforeAll, afterEach, afterAll } from 'vitest';&#10;&#10;// Type definitions for GitHub API responses&#10;export interface GitHubUser {&#10;  login: string;&#10;  id: number;&#10;  company: string | null;&#10;  email: string | null;&#10;  name: string | null;&#10;}&#10;&#10;export interface CopilotUsageBreakdown {&#10;  language: string;&#10;  editor: string;&#10;  suggestions_count: number;&#10;  acceptances_count: number;&#10;  lines_suggested: number;&#10;  lines_accepted: number;&#10;  active_users: number;&#10;}&#10;&#10;export interface CopilotUsageMetrics {&#10;  day: string;&#10;  total_suggestions_count: number;&#10;  total_acceptances_count: number;&#10;  total_lines_suggested: number;&#10;  total_lines_accepted: number;&#10;  total_active_users: number;&#10;  breakdown: CopilotUsageBreakdown[];&#10;}&#10;&#10;export interface CopilotSeatAssignee {&#10;  login: string;&#10;  id: number;&#10;  type: string;&#10;}&#10;&#10;export interface CopilotSeat {&#10;  assignee: CopilotSeatAssignee;&#10;  assigning_team: null;&#10;  pending_cancellation_date: string | null;&#10;  last_activity_at: string;&#10;  last_activity_editor: string;&#10;  created_at: string;&#10;  updated_at: string;&#10;}&#10;&#10;export interface CopilotSeats {&#10;  total_seats: number;&#10;  seats: CopilotSeat[];&#10;}&#10;&#10;export interface PullRequestUser {&#10;  login: string;&#10;  id: number;&#10;  type: string;&#10;}&#10;&#10;export interface PullRequest {&#10;  number: number;&#10;  title: string;&#10;  user: PullRequestUser;&#10;  created_at: string;&#10;  updated_at: string;&#10;  state: string;&#10;}&#10;&#10;export interface PullRequestReviewUser {&#10;  login: string;&#10;  id: number;&#10;  type: 'User' | 'Bot';&#10;}&#10;&#10;export interface PullRequestReview {&#10;  id: number;&#10;  user: PullRequestReviewUser;&#10;  state: string;&#10;  submitted_at: string;&#10;  body: string;&#10;}&#10;&#10;export interface CopilotSummary {&#10;  period: {&#10;    days: number;&#10;    since: string;&#10;    until: string;&#10;  };&#10;  usage_metrics: CopilotUsageMetrics[];&#10;  seat_info: CopilotSeats;&#10;  summary: {&#10;    total_seats: number;&#10;    total_active_users: number;&#10;    total_suggestions: number;&#10;    total_acceptances: number;&#10;    acceptance_rate: number;&#10;  };&#10;}&#10;&#10;// Mock data&#10;export const mockCurrentUser: GitHubUser = {&#10;  login: 'advait-incubyte',&#10;  id: 12345,&#10;  company: '@incubyte',&#10;  email: 'advait@incubyte.co',&#10;  name: 'Advait Maindalkar',&#10;};&#10;&#10;export const mockCopilotUsageMetrics: CopilotUsageMetrics[] = [&#10;  {&#10;    day: '2025-07-27',&#10;    total_suggestions_count: 150,&#10;    total_acceptances_count: 75,&#10;    total_lines_suggested: 300,&#10;    total_lines_accepted: 150,&#10;    total_active_users: 3,&#10;    breakdown: [&#10;      {&#10;        language: 'typescript',&#10;        editor: 'vscode',&#10;        suggestions_count: 100,&#10;        acceptances_count: 50,&#10;        lines_suggested: 200,&#10;        lines_accepted: 100,&#10;        active_users: 2,&#10;      },&#10;      {&#10;        language: 'javascript',&#10;        editor: 'vscode',&#10;        suggestions_count: 50,&#10;        acceptances_count: 25,&#10;        lines_suggested: 100,&#10;        lines_accepted: 50,&#10;        active_users: 1,&#10;      },&#10;    ],&#10;  },&#10;];&#10;&#10;export const mockCopilotSeats: CopilotSeats = {&#10;  total_seats: 5,&#10;  seats: [&#10;    {&#10;      assignee: {&#10;        login: 'teammate1',&#10;        id: 11111,&#10;        type: 'User',&#10;      },&#10;      assigning_team: null,&#10;      pending_cancellation_date: null,&#10;      last_activity_at: '2025-07-27T10:00:00Z',&#10;      last_activity_editor: 'vscode',&#10;      created_at: '2025-01-01T00:00:00Z',&#10;      updated_at: '2025-07-27T10:00:00Z',&#10;    },&#10;    {&#10;      assignee: {&#10;        login: 'teammate2',&#10;        id: 22222,&#10;        type: 'User',&#10;      },&#10;      assigning_team: null,&#10;      pending_cancellation_date: null,&#10;      last_activity_at: '2025-07-26T15:30:00Z',&#10;      last_activity_editor: 'vscode',&#10;      created_at: '2025-01-01T00:00:00Z',&#10;      updated_at: '2025-07-26T15:30:00Z',&#10;    },&#10;    {&#10;      assignee: {&#10;        login: 'teammate3',&#10;        id: 33333,&#10;        type: 'User',&#10;      },&#10;      assigning_team: null,&#10;      pending_cancellation_date: null,&#10;      last_activity_at: '2025-07-25T09:15:00Z',&#10;      last_activity_editor: 'vscode',&#10;      created_at: '2025-01-01T00:00:00Z',&#10;      updated_at: '2025-07-25T09:15:00Z',&#10;    },&#10;  ],&#10;};&#10;&#10;export const mockPullRequests: PullRequest[] = [&#10;  {&#10;    number: 123,&#10;    title: 'feat: add new feature',&#10;    user: {&#10;      login: 'teammate1',&#10;      id: 11111,&#10;      type: 'User',&#10;    },&#10;    created_at: '2025-07-20T10:00:00Z',&#10;    updated_at: '2025-07-21T10:00:00Z',&#10;    state: 'open',&#10;  },&#10;  {&#10;    number: 124,&#10;    title: 'fix: resolve bug in auth',&#10;    user: {&#10;      login: 'teammate2',&#10;      id: 22222,&#10;      type: 'User',&#10;    },&#10;    created_at: '2025-07-19T14:30:00Z',&#10;    updated_at: '2025-07-20T14:30:00Z',&#10;    state: 'closed',&#10;  },&#10;];&#10;&#10;export const mockPullRequestReviews: PullRequestReview[] = [&#10;  {&#10;    id: 1001,&#10;    user: {&#10;      login: 'github-actions[bot]',&#10;      id: 41898282,&#10;      type: 'Bot',&#10;    },&#10;    state: 'commented',&#10;    submitted_at: '2025-07-21T10:30:00Z',&#10;    body: 'GitHub Copilot review: This code looks good!',&#10;  },&#10;  {&#10;    id: 1002,&#10;    user: {&#10;      login: 'teammate3',&#10;      id: 33333,&#10;      type: 'User',&#10;    },&#10;    state: 'approved',&#10;    submitted_at: '2025-07-21T11:00:00Z',&#10;    body: 'LGTM! Great work on this feature.',&#10;  },&#10;];&#10;&#10;// MSW server setup&#10;const handlers = [&#10;  // GitHub User API&#10;  http.get('https://api.github.com/user', () =&gt; {&#10;    return HttpResponse.json(mockCurrentUser);&#10;  }),&#10;&#10;  // Copilot Usage Metrics API&#10;  http.get('https://api.github.com/orgs/:org/copilot/usage', () =&gt; {&#10;    return HttpResponse.json(mockCopilotUsageMetrics);&#10;  }),&#10;&#10;  // Copilot Seats API&#10;  http.get('https://api.github.com/orgs/:org/copilot/billing/seats', () =&gt; {&#10;    return HttpResponse.json(mockCopilotSeats);&#10;  }),&#10;&#10;  // Pull Requests API&#10;  http.get('https://api.github.com/repos/:org/:repo/pulls', () =&gt; {&#10;    return HttpResponse.json(mockPullRequests);&#10;  }),&#10;&#10;  // Pull Request Reviews API&#10;  http.get('https://api.github.com/repos/:org/:repo/pulls/:pullNumber/reviews', () =&gt; {&#10;    return HttpResponse.json(mockPullRequestReviews);&#10;  }),&#10;];&#10;&#10;export const server = setupServer(...handlers);&#10;&#10;// Setup MSW&#10;beforeAll(() =&gt; {&#10;  server.listen({ onUnhandledRequest: 'error' });&#10;});&#10;&#10;afterEach(() =&gt; {&#10;  server.resetHandlers();&#10;});&#10;&#10;afterAll(() =&gt; {&#10;  server.close();&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>